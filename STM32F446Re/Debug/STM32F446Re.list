
STM32F446Re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b0c  08003b0c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b14  08003b14  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200000a0  08003bbc  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003bbc  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a31d  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af9  00000000  00000000  0002a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000790  00000000  00000000  0002c788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002204e  00000000  00000000  0002cf18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000089dd  00000000  00000000  0004ef66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c897b  00000000  00000000  00057943  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001202be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002448  00000000  00000000  0012033c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003548 	.word	0x08003548

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08003548 	.word	0x08003548

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <MX_GPIO_Init+0xf0>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_GPIO_Init+0xf0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	481a      	ldr	r0, [pc, #104]	; (80006a4 <MX_GPIO_Init+0xf4>)
 800063c:	f000 fd7c 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_GPIO_Init+0xf8>)
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4815      	ldr	r0, [pc, #84]	; (80006ac <MX_GPIO_Init+0xfc>)
 8000656:	f000 fbc5 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800065a:	230c      	movs	r3, #12
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800066a:	2307      	movs	r3, #7
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000676:	f000 fbb5 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0xf4>)
 8000692:	f000 fba7 	bl	8000de4 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	10210000 	.word	0x10210000
 80006ac:	40020800 	.word	0x40020800

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fa1b 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f83f 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f7ff ff77 	bl	80005b0 <MX_GPIO_Init>
  MX_SPI3_Init();
 80006c2:	f000 f8b5 	bl	8000830 <MX_SPI3_Init>
#ifndef MASTER_BOARD
	hspi3.Init.Mode = SPI_MODE_SLAVE;
	HAL_SPI_Init(&hspi3);
#endif

	LCD_Init();
 80006c6:	f001 fe5f 	bl	8002388 <LCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef MASTER_BOARD
		while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 80006ca:	bf00      	nop
 80006cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <main+0x70>)
 80006d2:	f000 fd19 	bl	8001108 <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f7      	beq.n	80006cc <main+0x1c>
		LCD_Printf("Push button to start transmission");
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <main+0x74>)
 80006de:	f002 fa0b 	bl	8002af8 <LCD_Printf>
		while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 80006e2:	bf00      	nop
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <main+0x70>)
 80006ea:	f000 fd0d 	bl	8001108 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f7      	bne.n	80006e4 <main+0x34>
#endif
		result = HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) aTxBuffer, (uint8_t *) aRxBuffer, BUFFERSIZE, 0xFFFFFFFF);
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2323      	movs	r3, #35	; 0x23
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <main+0x78>)
 80006fe:	490b      	ldr	r1, [pc, #44]	; (800072c <main+0x7c>)
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <main+0x80>)
 8000702:	f001 fac3 	bl	8001c8c <HAL_SPI_TransmitReceive>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <main+0x84>)
 800070c:	701a      	strb	r2, [r3, #0]
		if (result == HAL_OK) {
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <main+0x84>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1d9      	bne.n	80006ca <main+0x1a>
			LCD_Printf("%s\n", aRxBuffer);
 8000716:	4904      	ldr	r1, [pc, #16]	; (8000728 <main+0x78>)
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <main+0x88>)
 800071a:	f002 f9ed 	bl	8002af8 <LCD_Printf>
		while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 800071e:	e7d4      	b.n	80006ca <main+0x1a>
 8000720:	40020800 	.word	0x40020800
 8000724:	08003560 	.word	0x08003560
 8000728:	200001dc 	.word	0x200001dc
 800072c:	20000000 	.word	0x20000000
 8000730:	20000200 	.word	0x20000200
 8000734:	200001d8 	.word	0x200001d8
 8000738:	08003584 	.word	0x08003584

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 faee 	bl	8002d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <SystemClock_Config+0xdc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <SystemClock_Config+0xdc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemClock_Config+0xdc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <SystemClock_Config+0xe0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a25      	ldr	r2, [pc, #148]	; (800081c <SystemClock_Config+0xe0>)
 8000786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b23      	ldr	r3, [pc, #140]	; (800081c <SystemClock_Config+0xe0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800079c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007b0:	23b4      	movs	r3, #180	; 0xb4
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 ffa3 	bl	8001710 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d0:	f000 f826 	bl	8000820 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d4:	f000 fcca 	bl	800116c <HAL_PWREx_EnableOverDrive>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007de:	f000 f81f 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2302      	movs	r3, #2
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2105      	movs	r1, #5
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fd03 	bl	800120c <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800080c:	f000 f808 	bl	8000820 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_SPI3_Init+0x64>)
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_SPI3_Init+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_SPI3_Init+0x64>)
 800083c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000840:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI3_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_SPI3_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI3_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI3_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI3_Init+0x64>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI3_Init+0x64>)
 8000864:	2238      	movs	r2, #56	; 0x38
 8000866:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_SPI3_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI3_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_SPI3_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI3_Init+0x64>)
 800087c:	220a      	movs	r2, #10
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_SPI3_Init+0x64>)
 8000882:	f001 f99f 	bl	8001bc4 <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800088c:	f7ff ffc8 	bl	8000820 <Error_Handler>
  }

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000200 	.word	0x20000200
 8000898:	40003c00 	.word	0x40003c00

0800089c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_SPI_MspInit+0x84>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d12c      	bne.n	8000918 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_SPI_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_SPI_MspInit+0x88>)
 80008c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_SPI_MspInit+0x88>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_SPI_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <HAL_SPI_MspInit+0x88>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_SPI_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000908:	2306      	movs	r3, #6
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_SPI_MspInit+0x8c>)
 8000914:	f000 fa66 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40003c00 	.word	0x40003c00
 8000924:	40023800 	.word	0x40023800
 8000928:	40020800 	.word	0x40020800

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f8e0 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_sbrk+0x50>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x16>
		heap_end = &end;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <_sbrk+0x50>)
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <_sbrk+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <_sbrk+0x50>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <_sbrk+0x50>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4413      	add	r3, r2
 80009fc:	466a      	mov	r2, sp
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d907      	bls.n	8000a12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a02:	f002 f969 	bl	8002cd8 <__errno>
 8000a06:	4602      	mov	r2, r0
 8000a08:	230c      	movs	r3, #12
 8000a0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a10:	e006      	b.n	8000a20 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <_sbrk+0x50>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <_sbrk+0x50>)
 8000a1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000bc 	.word	0x200000bc
 8000a2c:	20000260 	.word	0x20000260

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <SystemInit+0x60>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <SystemInit+0x60>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <SystemInit+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <SystemInit+0x64>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <SystemInit+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <SystemInit+0x64>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <SystemInit+0x64>)
 8000a5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SystemInit+0x64>)
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <SystemInit+0x68>)
 8000a6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <SystemInit+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <SystemInit+0x64>)
 8000a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SystemInit+0x60>)
 8000a80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a84:	609a      	str	r2, [r3, #8]
#endif
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00
 8000a94:	40023800 	.word	0x40023800
 8000a98:	24003010 	.word	0x24003010

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ffb3 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f002 f90b 	bl	8002ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fdef 	bl	80006b0 <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad8:	08003b1c 	.word	0x08003b1c
  ldr  r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae0:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8000ae4:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8000ae8:	20000260 	.word	0x20000260

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f92f 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff ff02 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f939 	bl	8000dca <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f90f 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000024 	.word	0x20000024
 8000b8c:	2000002c 	.word	0x2000002c
 8000b90:	20000028 	.word	0x20000028

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000002c 	.word	0x2000002c
 8000bb8:	20000258 	.word	0x20000258

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000258 	.word	0x20000258

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_Delay+0x40>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000002c 	.word	0x2000002c

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff47 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5c 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb0 	bl	8000d38 <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	e165      	b.n	80010cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f040 8154 	bne.w	80010c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x4a>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d123      	bne.n	8000e76 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	69b9      	ldr	r1, [r7, #24]
 8000e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0203 	and.w	r2, r3, #3
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d00b      	beq.n	8000eca <HAL_GPIO_Init+0xe6>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d007      	beq.n	8000eca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d130      	bne.n	8000f2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80ae 	beq.w	80010c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <HAL_GPIO_Init+0x2fc>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a5b      	ldr	r2, [pc, #364]	; (80010e0 <HAL_GPIO_Init+0x2fc>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b59      	ldr	r3, [pc, #356]	; (80010e0 <HAL_GPIO_Init+0x2fc>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f86:	4a57      	ldr	r2, [pc, #348]	; (80010e4 <HAL_GPIO_Init+0x300>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <HAL_GPIO_Init+0x304>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d025      	beq.n	8000ffe <HAL_GPIO_Init+0x21a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4d      	ldr	r2, [pc, #308]	; (80010ec <HAL_GPIO_Init+0x308>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d01f      	beq.n	8000ffa <HAL_GPIO_Init+0x216>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4c      	ldr	r2, [pc, #304]	; (80010f0 <HAL_GPIO_Init+0x30c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x212>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	; (80010f4 <HAL_GPIO_Init+0x310>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x20e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <HAL_GPIO_Init+0x314>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x20a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a49      	ldr	r2, [pc, #292]	; (80010fc <HAL_GPIO_Init+0x318>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x206>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a48      	ldr	r2, [pc, #288]	; (8001100 <HAL_GPIO_Init+0x31c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x202>
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	e00c      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e00a      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fea:	2305      	movs	r3, #5
 8000fec:	e008      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000fee:	2304      	movs	r3, #4
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e004      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x21c>
 8000ffe:	2300      	movs	r3, #0
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	f002 0203 	and.w	r2, r2, #3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	4093      	lsls	r3, r2
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001010:	4934      	ldr	r1, [pc, #208]	; (80010e4 <HAL_GPIO_Init+0x300>)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_GPIO_Init+0x320>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001042:	4a30      	ldr	r2, [pc, #192]	; (8001104 <HAL_GPIO_Init+0x320>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001048:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <HAL_GPIO_Init+0x320>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800106c:	4a25      	ldr	r2, [pc, #148]	; (8001104 <HAL_GPIO_Init+0x320>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <HAL_GPIO_Init+0x320>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_GPIO_Init+0x320>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_GPIO_Init+0x320>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_GPIO_Init+0x320>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	f67f ae96 	bls.w	8000e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d4:	bf00      	nop
 80010d6:	3724      	adds	r7, #36	; 0x24
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40013800 	.word	0x40013800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40021400 	.word	0x40021400
 8001100:	40021800 	.word	0x40021800
 8001104:	40013c00 	.word	0x40013c00

08001108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e001      	b.n	800112a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	4613      	mov	r3, r2
 8001146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001154:	e003      	b.n	800115e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	041a      	lsls	r2, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	619a      	str	r2, [r3, #24]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_PWREx_EnableOverDrive+0x90>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <HAL_PWREx_EnableOverDrive+0x90>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_PWREx_EnableOverDrive+0x90>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_PWREx_EnableOverDrive+0x94>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001198:	f7ff fd10 	bl	8000bbc <HAL_GetTick>
 800119c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800119e:	e009      	b.n	80011b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011a0:	f7ff fd0c 	bl	8000bbc <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ae:	d901      	bls.n	80011b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e01f      	b.n	80011f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_PWREx_EnableOverDrive+0x98>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d1ee      	bne.n	80011a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c8:	f7ff fcf8 	bl	8000bbc <HAL_GetTick>
 80011cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011ce:	e009      	b.n	80011e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011d0:	f7ff fcf4 	bl	8000bbc <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011de:	d901      	bls.n	80011e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e007      	b.n	80011f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_PWREx_EnableOverDrive+0x98>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011f0:	d1ee      	bne.n	80011d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	420e0040 	.word	0x420e0040
 8001204:	40007000 	.word	0x40007000
 8001208:	420e0044 	.word	0x420e0044

0800120c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0ca      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d90c      	bls.n	8001248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0b6      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d020      	beq.n	8001296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001260:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4a57      	ldr	r2, [pc, #348]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800126a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001278:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4a51      	ldr	r2, [pc, #324]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001284:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	494c      	ldr	r1, [pc, #304]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d044      	beq.n	800132c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d119      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e07d      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d003      	beq.n	80012ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e06d      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e065      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f023 0203 	bic.w	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4933      	ldr	r1, [pc, #204]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fc5e 	bl	8000bbc <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	e00a      	b.n	800131a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff fc5a 	bl	8000bbc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e04d      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 020c 	and.w	r2, r3, #12
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1eb      	bne.n	8001304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d20c      	bcs.n	8001354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HAL_RCC_ClockConfig+0x1b4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e030      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4915      	ldr	r1, [pc, #84]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800136e:	4313      	orrs	r3, r2
 8001370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d009      	beq.n	8001392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	490d      	ldr	r1, [pc, #52]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800138e:	4313      	orrs	r3, r2
 8001390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001392:	f000 f81d 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 8001396:	4601      	mov	r1, r0
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_RCC_ClockConfig+0x1b8>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	5cd3      	ldrb	r3, [r2, r3]
 80013a6:	fa21 f303 	lsr.w	r3, r1, r3
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fbc0 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00
 80013c4:	40023800 	.word	0x40023800
 80013c8:	08003588 	.word	0x08003588
 80013cc:	20000024 	.word	0x20000024

080013d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ea:	4bc6      	ldr	r3, [pc, #792]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	f200 817e 	bhi.w	80016f4 <HAL_RCC_GetSysClockFreq+0x324>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <HAL_RCC_GetSysClockFreq+0x30>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001435 	.word	0x08001435
 8001404:	080016f5 	.word	0x080016f5
 8001408:	080016f5 	.word	0x080016f5
 800140c:	080016f5 	.word	0x080016f5
 8001410:	0800143b 	.word	0x0800143b
 8001414:	080016f5 	.word	0x080016f5
 8001418:	080016f5 	.word	0x080016f5
 800141c:	080016f5 	.word	0x080016f5
 8001420:	08001441 	.word	0x08001441
 8001424:	080016f5 	.word	0x080016f5
 8001428:	080016f5 	.word	0x080016f5
 800142c:	080016f5 	.word	0x080016f5
 8001430:	0800159d 	.word	0x0800159d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001434:	4bb4      	ldr	r3, [pc, #720]	; (8001708 <HAL_RCC_GetSysClockFreq+0x338>)
 8001436:	613b      	str	r3, [r7, #16]
       break;
 8001438:	e15f      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800143a:	4bb4      	ldr	r3, [pc, #720]	; (800170c <HAL_RCC_GetSysClockFreq+0x33c>)
 800143c:	613b      	str	r3, [r7, #16]
      break;
 800143e:	e15c      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001440:	4bb0      	ldr	r3, [pc, #704]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001448:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800144a:	4bae      	ldr	r3, [pc, #696]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d04a      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001456:	4bab      	ldr	r3, [pc, #684]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	099b      	lsrs	r3, r3, #6
 800145c:	f04f 0400 	mov.w	r4, #0
 8001460:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	ea03 0501 	and.w	r5, r3, r1
 800146c:	ea04 0602 	and.w	r6, r4, r2
 8001470:	4629      	mov	r1, r5
 8001472:	4632      	mov	r2, r6
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f04f 0400 	mov.w	r4, #0
 800147c:	0154      	lsls	r4, r2, #5
 800147e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001482:	014b      	lsls	r3, r1, #5
 8001484:	4619      	mov	r1, r3
 8001486:	4622      	mov	r2, r4
 8001488:	1b49      	subs	r1, r1, r5
 800148a:	eb62 0206 	sbc.w	r2, r2, r6
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	f04f 0400 	mov.w	r4, #0
 8001496:	0194      	lsls	r4, r2, #6
 8001498:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800149c:	018b      	lsls	r3, r1, #6
 800149e:	1a5b      	subs	r3, r3, r1
 80014a0:	eb64 0402 	sbc.w	r4, r4, r2
 80014a4:	f04f 0100 	mov.w	r1, #0
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	00e2      	lsls	r2, r4, #3
 80014ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014b2:	00d9      	lsls	r1, r3, #3
 80014b4:	460b      	mov	r3, r1
 80014b6:	4614      	mov	r4, r2
 80014b8:	195b      	adds	r3, r3, r5
 80014ba:	eb44 0406 	adc.w	r4, r4, r6
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	0262      	lsls	r2, r4, #9
 80014c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014cc:	0259      	lsls	r1, r3, #9
 80014ce:	460b      	mov	r3, r1
 80014d0:	4614      	mov	r4, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	4621      	mov	r1, r4
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f04f 0400 	mov.w	r4, #0
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	f7fe fee6 	bl	80002b0 <__aeabi_uldivmod>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e049      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ec:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	f04f 0400 	mov.w	r4, #0
 80014f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	ea03 0501 	and.w	r5, r3, r1
 8001502:	ea04 0602 	and.w	r6, r4, r2
 8001506:	4629      	mov	r1, r5
 8001508:	4632      	mov	r2, r6
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	f04f 0400 	mov.w	r4, #0
 8001512:	0154      	lsls	r4, r2, #5
 8001514:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001518:	014b      	lsls	r3, r1, #5
 800151a:	4619      	mov	r1, r3
 800151c:	4622      	mov	r2, r4
 800151e:	1b49      	subs	r1, r1, r5
 8001520:	eb62 0206 	sbc.w	r2, r2, r6
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	f04f 0400 	mov.w	r4, #0
 800152c:	0194      	lsls	r4, r2, #6
 800152e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001532:	018b      	lsls	r3, r1, #6
 8001534:	1a5b      	subs	r3, r3, r1
 8001536:	eb64 0402 	sbc.w	r4, r4, r2
 800153a:	f04f 0100 	mov.w	r1, #0
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	00e2      	lsls	r2, r4, #3
 8001544:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001548:	00d9      	lsls	r1, r3, #3
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	195b      	adds	r3, r3, r5
 8001550:	eb44 0406 	adc.w	r4, r4, r6
 8001554:	f04f 0100 	mov.w	r1, #0
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	02a2      	lsls	r2, r4, #10
 800155e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001562:	0299      	lsls	r1, r3, #10
 8001564:	460b      	mov	r3, r1
 8001566:	4614      	mov	r4, r2
 8001568:	4618      	mov	r0, r3
 800156a:	4621      	mov	r1, r4
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f04f 0400 	mov.w	r4, #0
 8001572:	461a      	mov	r2, r3
 8001574:	4623      	mov	r3, r4
 8001576:	f7fe fe9b 	bl	80002b0 <__aeabi_uldivmod>
 800157a:	4603      	mov	r3, r0
 800157c:	460c      	mov	r4, r1
 800157e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	3301      	adds	r3, #1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	613b      	str	r3, [r7, #16]
      break;
 800159a:	e0ae      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d04a      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	f04f 0400 	mov.w	r4, #0
 80015bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	ea03 0501 	and.w	r5, r3, r1
 80015c8:	ea04 0602 	and.w	r6, r4, r2
 80015cc:	4629      	mov	r1, r5
 80015ce:	4632      	mov	r2, r6
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f04f 0400 	mov.w	r4, #0
 80015d8:	0154      	lsls	r4, r2, #5
 80015da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015de:	014b      	lsls	r3, r1, #5
 80015e0:	4619      	mov	r1, r3
 80015e2:	4622      	mov	r2, r4
 80015e4:	1b49      	subs	r1, r1, r5
 80015e6:	eb62 0206 	sbc.w	r2, r2, r6
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	f04f 0400 	mov.w	r4, #0
 80015f2:	0194      	lsls	r4, r2, #6
 80015f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015f8:	018b      	lsls	r3, r1, #6
 80015fa:	1a5b      	subs	r3, r3, r1
 80015fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001600:	f04f 0100 	mov.w	r1, #0
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	00e2      	lsls	r2, r4, #3
 800160a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800160e:	00d9      	lsls	r1, r3, #3
 8001610:	460b      	mov	r3, r1
 8001612:	4614      	mov	r4, r2
 8001614:	195b      	adds	r3, r3, r5
 8001616:	eb44 0406 	adc.w	r4, r4, r6
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	0262      	lsls	r2, r4, #9
 8001624:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001628:	0259      	lsls	r1, r3, #9
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f04f 0400 	mov.w	r4, #0
 8001638:	461a      	mov	r2, r3
 800163a:	4623      	mov	r3, r4
 800163c:	f7fe fe38 	bl	80002b0 <__aeabi_uldivmod>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e049      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	f04f 0400 	mov.w	r4, #0
 8001652:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	ea03 0501 	and.w	r5, r3, r1
 800165e:	ea04 0602 	and.w	r6, r4, r2
 8001662:	4629      	mov	r1, r5
 8001664:	4632      	mov	r2, r6
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	f04f 0400 	mov.w	r4, #0
 800166e:	0154      	lsls	r4, r2, #5
 8001670:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001674:	014b      	lsls	r3, r1, #5
 8001676:	4619      	mov	r1, r3
 8001678:	4622      	mov	r2, r4
 800167a:	1b49      	subs	r1, r1, r5
 800167c:	eb62 0206 	sbc.w	r2, r2, r6
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	f04f 0400 	mov.w	r4, #0
 8001688:	0194      	lsls	r4, r2, #6
 800168a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800168e:	018b      	lsls	r3, r1, #6
 8001690:	1a5b      	subs	r3, r3, r1
 8001692:	eb64 0402 	sbc.w	r4, r4, r2
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	00e2      	lsls	r2, r4, #3
 80016a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016a4:	00d9      	lsls	r1, r3, #3
 80016a6:	460b      	mov	r3, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	195b      	adds	r3, r3, r5
 80016ac:	eb44 0406 	adc.w	r4, r4, r6
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	02a2      	lsls	r2, r4, #10
 80016ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016be:	0299      	lsls	r1, r3, #10
 80016c0:	460b      	mov	r3, r1
 80016c2:	4614      	mov	r4, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f04f 0400 	mov.w	r4, #0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4623      	mov	r3, r4
 80016d2:	f7fe fded 	bl	80002b0 <__aeabi_uldivmod>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_GetSysClockFreq+0x334>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0f1b      	lsrs	r3, r3, #28
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f0:	613b      	str	r3, [r7, #16]
      break;
 80016f2:	e002      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_RCC_GetSysClockFreq+0x338>)
 80016f6:	613b      	str	r3, [r7, #16]
      break;
 80016f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016fa:	693b      	ldr	r3, [r7, #16]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	00f42400 	.word	0x00f42400
 800170c:	007a1200 	.word	0x007a1200

08001710 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8083 	beq.w	8001830 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800172a:	4b95      	ldr	r3, [pc, #596]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d019      	beq.n	800176a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001736:	4b92      	ldr	r3, [pc, #584]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001742:	4b8f      	ldr	r3, [pc, #572]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174e:	d00c      	beq.n	800176a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001750:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001758:	2b0c      	cmp	r3, #12
 800175a:	d112      	bne.n	8001782 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175c:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001768:	d10b      	bne.n	8001782 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d05b      	beq.n	800182e <HAL_RCC_OscConfig+0x11e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d157      	bne.n	800182e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e216      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x8a>
 800178c:	4b7c      	ldr	r3, [pc, #496]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7b      	ldr	r2, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e01d      	b.n	80017d6 <HAL_RCC_OscConfig+0xc6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0xae>
 80017a4:	4b76      	ldr	r3, [pc, #472]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a75      	ldr	r2, [pc, #468]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b73      	ldr	r3, [pc, #460]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a72      	ldr	r2, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0xc6>
 80017be:	4b70      	ldr	r3, [pc, #448]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6f      	ldr	r2, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b6d      	ldr	r3, [pc, #436]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6c      	ldr	r2, [pc, #432]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d013      	beq.n	8001806 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff f9ed 	bl	8000bbc <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e6:	f7ff f9e9 	bl	8000bbc <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1db      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f8:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0xd6>
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff f9d9 	bl	8000bbc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180e:	f7ff f9d5 	bl	8000bbc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	; 0x64
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1c7      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001820:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0xfe>
 800182c:	e000      	b.n	8001830 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d06f      	beq.n	800191c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b00      	cmp	r3, #0
 8001846:	d017      	beq.n	8001878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001848:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001850:	2b08      	cmp	r3, #8
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001854:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d11c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186c:	4b44      	ldr	r3, [pc, #272]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001878:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x180>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e18f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4938      	ldr	r1, [pc, #224]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a4:	e03a      	b.n	800191c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d020      	beq.n	80018f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f982 	bl	8000bbc <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff f97e 	bl	8000bbc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e170      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4925      	ldr	r1, [pc, #148]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f961 	bl	8000bbc <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff f95d 	bl	8000bbc <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e14f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d037      	beq.n	8001998 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d016      	beq.n	800195e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_RCC_OscConfig+0x278>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff f941 	bl	8000bbc <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff f93d 	bl	8000bbc <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e12f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x22e>
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_RCC_OscConfig+0x278>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001964:	f7ff f92a 	bl	8000bbc <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196a:	e00f      	b.n	800198c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff f926 	bl	8000bbc <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d908      	bls.n	800198c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e118      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	42470000 	.word	0x42470000
 8001988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b8a      	ldr	r3, [pc, #552]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e9      	bne.n	800196c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8097 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b83      	ldr	r3, [pc, #524]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a7e      	ldr	r2, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a75      	ldr	r2, [pc, #468]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff f8e5 	bl	8000bbc <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff f8e1 	bl	8000bbc <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0d3      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x4ac>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x31a>
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
 8001a28:	e01c      	b.n	8001a64 <HAL_RCC_OscConfig+0x354>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x33c>
 8001a32:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	4a60      	ldr	r2, [pc, #384]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4a5d      	ldr	r2, [pc, #372]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0x354>
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a59      	ldr	r2, [pc, #356]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
 8001a58:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d015      	beq.n	8001a98 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f8a6 	bl	8000bbc <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff f8a2 	bl	8000bbc <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e092      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0ee      	beq.n	8001a74 <HAL_RCC_OscConfig+0x364>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f890 	bl	8000bbc <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f88c 	bl	8000bbc <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e07c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ee      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d068      	beq.n	8001bae <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001adc:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d060      	beq.n	8001baa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d145      	bne.n	8001b7c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f861 	bl	8000bbc <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f85d 	bl	8000bbc <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e04f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69da      	ldr	r2, [r3, #28]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	019b      	lsls	r3, r3, #6
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	3b01      	subs	r3, #1
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	061b      	lsls	r3, r3, #24
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	071b      	lsls	r3, r3, #28
 8001b48:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f832 	bl	8000bbc <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f82e 	bl	8000bbc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e020      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x44c>
 8001b7a:	e018      	b.n	8001bae <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x4b0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff f81b 	bl	8000bbc <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7ff f817 	bl	8000bbc <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e009      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x4a8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x47a>
 8001ba8:	e001      	b.n	8001bae <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42470060 	.word	0x42470060

08001bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e056      	b.n	8001c84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe fe53 	bl	800089c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	ea42 0103 	orr.w	r1, r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	0c1b      	lsrs	r3, r3, #16
 8001c54:	f003 0104 	and.w	r1, r3, #4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_SPI_TransmitReceive+0x26>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e18a      	b.n	8001fc8 <HAL_SPI_TransmitReceive+0x33c>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cba:	f7fe ff7f 	bl	8000bbc <HAL_GetTick>
 8001cbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d00f      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0x70>
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ce2:	d107      	bne.n	8001cf4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <HAL_SPI_TransmitReceive+0x68>
 8001cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d003      	beq.n	8001cfc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cfa:	e15b      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_SPI_TransmitReceive+0x82>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_SPI_TransmitReceive+0x82>
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d103      	bne.n	8001d16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d14:	e14e      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d003      	beq.n	8001d2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2205      	movs	r2, #5
 8001d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	887a      	ldrh	r2, [r7, #2]
 8001d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	887a      	ldrh	r2, [r7, #2]
 8001d52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	2b40      	cmp	r3, #64	; 0x40
 8001d6c:	d007      	beq.n	8001d7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d86:	d178      	bne.n	8001e7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_SPI_TransmitReceive+0x10a>
 8001d90:	8b7b      	ldrh	r3, [r7, #26]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d166      	bne.n	8001e64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	881a      	ldrh	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	1c9a      	adds	r2, r3, #2
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dba:	e053      	b.n	8001e64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d11b      	bne.n	8001e02 <HAL_SPI_TransmitReceive+0x176>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_SPI_TransmitReceive+0x176>
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d113      	bne.n	8001e02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	881a      	ldrh	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	1c9a      	adds	r2, r3, #2
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d119      	bne.n	8001e44 <HAL_SPI_TransmitReceive+0x1b8>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d014      	beq.n	8001e44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	b292      	uxth	r2, r2
 8001e26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	1c9a      	adds	r2, r3, #2
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e44:	f7fe feba 	bl	8000bbc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d807      	bhi.n	8001e64 <HAL_SPI_TransmitReceive+0x1d8>
 8001e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d003      	beq.n	8001e64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e62:	e0a7      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1a6      	bne.n	8001dbc <HAL_SPI_TransmitReceive+0x130>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1a1      	bne.n	8001dbc <HAL_SPI_TransmitReceive+0x130>
 8001e78:	e07c      	b.n	8001f74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0x1fc>
 8001e82:	8b7b      	ldrh	r3, [r7, #26]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d16b      	bne.n	8001f60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	330c      	adds	r3, #12
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001eae:	e057      	b.n	8001f60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d11c      	bne.n	8001ef8 <HAL_SPI_TransmitReceive+0x26c>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <HAL_SPI_TransmitReceive+0x26c>
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d114      	bne.n	8001ef8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	330c      	adds	r3, #12
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d119      	bne.n	8001f3a <HAL_SPI_TransmitReceive+0x2ae>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d014      	beq.n	8001f3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f36:	2301      	movs	r3, #1
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f3a:	f7fe fe3f 	bl	8000bbc <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d803      	bhi.n	8001f52 <HAL_SPI_TransmitReceive+0x2c6>
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d102      	bne.n	8001f58 <HAL_SPI_TransmitReceive+0x2cc>
 8001f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f5e:	e029      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1a2      	bne.n	8001eb0 <HAL_SPI_TransmitReceive+0x224>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d19d      	bne.n	8001eb0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f893 	bl	80020a4 <SPI_EndRxTxTransaction>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f90:	e010      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	e000      	b.n	8001fb4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fe0:	e04c      	b.n	800207c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d048      	beq.n	800207c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001fea:	f7fe fde7 	bl	8000bbc <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d902      	bls.n	8002000 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d13d      	bne.n	800207c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800200e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002018:	d111      	bne.n	800203e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002022:	d004      	beq.n	800202e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d107      	bne.n	800203e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002046:	d10f      	bne.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e00f      	b.n	800209c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4013      	ands	r3, r2
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	429a      	cmp	r2, r3
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	429a      	cmp	r2, r3
 8002098:	d1a3      	bne.n	8001fe2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <SPI_EndRxTxTransaction+0x7c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <SPI_EndRxTxTransaction+0x80>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0d5b      	lsrs	r3, r3, #21
 80020bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ce:	d112      	bne.n	80020f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7ff ff78 	bl	8001fd0 <SPI_WaitFlagStateUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e00f      	b.n	8002116 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3b01      	subs	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d0f2      	beq.n	80020f6 <SPI_EndRxTxTransaction+0x52>
 8002110:	e000      	b.n	8002114 <SPI_EndRxTxTransaction+0x70>
        break;
 8002112:	bf00      	nop
  }

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000024 	.word	0x20000024
 8002124:	165e9f81 	.word	0x165e9f81

08002128 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 8002130:	e003      	b.n	800213a <delay+0x12>
 8002132:	bf00      	nop
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f8      	bne.n	8002132 <delay+0xa>
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d003      	beq.n	8002162 <GPIO_Init+0x16>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 8081 	bne.w	8002264 <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <GPIO_Init+0x120>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a40      	ldr	r2, [pc, #256]	; (800226c <GPIO_Init+0x120>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b3e      	ldr	r3, [pc, #248]	; (800226c <GPIO_Init+0x120>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <GPIO_Init+0x120>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a39      	ldr	r2, [pc, #228]	; (800226c <GPIO_Init+0x120>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b37      	ldr	r3, [pc, #220]	; (800226c <GPIO_Init+0x120>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <GPIO_Init+0x120>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a32      	ldr	r2, [pc, #200]	; (800226c <GPIO_Init+0x120>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <GPIO_Init+0x120>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 80021b6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	4828      	ldr	r0, [pc, #160]	; (8002270 <GPIO_Init+0x124>)
 80021d0:	f7fe fe08 	bl	8000de4 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 80021d4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80021d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4821      	ldr	r0, [pc, #132]	; (8002274 <GPIO_Init+0x128>)
 80021ee:	f7fe fdf9 	bl	8000de4 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	481b      	ldr	r0, [pc, #108]	; (8002278 <GPIO_Init+0x12c>)
 800220a:	f7fe fdeb 	bl	8000de4 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 800220e:	2313      	movs	r3, #19
 8002210:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4812      	ldr	r0, [pc, #72]	; (8002270 <GPIO_Init+0x124>)
 8002226:	f7fe fddd 	bl	8000de4 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800222a:	2301      	movs	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <GPIO_Init+0x128>)
 8002242:	f7fe fdcf 	bl	8000de4 <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002246:	2302      	movs	r3, #2
 8002248:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224a:	2301      	movs	r3, #1
 800224c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	4806      	ldr	r0, [pc, #24]	; (8002278 <GPIO_Init+0x12c>)
 800225e:	f7fe fdc1 	bl	8000de4 <HAL_GPIO_Init>
 8002262:	e000      	b.n	8002266 <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8002264:	bf00      	nop
}
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020800 	.word	0x40020800

0800227c <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <LCD_Write8+0xa4>)
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800228e:	4013      	ands	r3, r2
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	0252      	lsls	r2, r2, #9
 8002294:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002298:	431a      	orrs	r2, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	431a      	orrs	r2, r3
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	491c      	ldr	r1, [pc, #112]	; (8002320 <LCD_Write8+0xa4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <LCD_Write8+0xa8>)
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 80022ba:	4013      	ands	r3, r2
 80022bc:	79fa      	ldrb	r2, [r7, #7]
 80022be:	f002 0208 	and.w	r2, r2, #8
 80022c2:	431a      	orrs	r2, r3
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	431a      	orrs	r2, r3
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	105b      	asrs	r3, r3, #1
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	4910      	ldr	r1, [pc, #64]	; (8002324 <LCD_Write8+0xa8>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <LCD_Write8+0xac>)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80022ee:	4013      	ands	r3, r2
 80022f0:	79fa      	ldrb	r2, [r7, #7]
 80022f2:	0192      	lsls	r2, r2, #6
 80022f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80022f8:	490b      	ldr	r1, [pc, #44]	; (8002328 <LCD_Write8+0xac>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <LCD_Write8+0xa4>)
 8002300:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002304:	619a      	str	r2, [r3, #24]
 8002306:	2002      	movs	r0, #2
 8002308:	f7ff ff0e 	bl	8002128 <delay>
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <LCD_Write8+0xa4>)
 800230e:	2202      	movs	r2, #2
 8002310:	619a      	str	r2, [r3, #24]
 8002312:	2002      	movs	r0, #2
 8002314:	f7ff ff08 	bl	8002128 <delay>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40020000 	.word	0x40020000
 8002324:	40020400 	.word	0x40020400
 8002328:	40020800 	.word	0x40020800

0800232c <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	460a      	mov	r2, r1
 8002336:	80fb      	strh	r3, [r7, #6]
 8002338:	4613      	mov	r3, r2
 800233a:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <LCD_Write16Register16+0x58>)
 800233e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002342:	619a      	str	r2, [r3, #24]
	LCD_Write8(a >> 8);
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff95 	bl	800227c <LCD_Write8>
	LCD_Write8(a);
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff90 	bl	800227c <LCD_Write8>
	LCD_CD_DATA();
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <LCD_Write16Register16+0x58>)
 800235e:	2210      	movs	r2, #16
 8002360:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8002362:	88bb      	ldrh	r3, [r7, #4]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	b29b      	uxth	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff86 	bl	800227c <LCD_Write8>
	LCD_Write8(d);
 8002370:	88bb      	ldrh	r3, [r7, #4]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff81 	bl	800227c <LCD_Write8>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40020000 	.word	0x40020000

08002388 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <LCD_Init+0xf4>)
 8002390:	22f0      	movs	r2, #240	; 0xf0
 8002392:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8002394:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <LCD_Init+0xf8>)
 8002396:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800239a:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 800239c:	4b39      	ldr	r3, [pc, #228]	; (8002484 <LCD_Init+0xfc>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <LCD_Init+0x100>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	801a      	strh	r2, [r3, #0]
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <LCD_Init+0x100>)
 80023aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <LCD_Init+0x104>)
 80023b0:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <LCD_Init+0x108>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <LCD_Init+0x10c>)
 80023ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <LCD_Init+0x10c>)
 80023c2:	881a      	ldrh	r2, [r3, #0]
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <LCD_Init+0x110>)
 80023c6:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <LCD_Init+0x114>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7ff febc 	bl	800214c <GPIO_Init>

	LCD_Reset();
 80023d4:	f000 f96c 	bl	80026b0 <LCD_Reset>
	HAL_Delay(50);
 80023d8:	2032      	movs	r0, #50	; 0x32
 80023da:	f7fe fbfb 	bl	8000bd4 <HAL_Delay>

	LCD_CS_ACTIVE();
 80023de:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <LCD_Init+0x118>)
 80023e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023e4:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined (ILI9328)
	uint8_t i = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 80023ea:	e01d      	b.n	8002428 <LCD_Init+0xa0>
		a = ILI932x_regValues[i++];
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	71fa      	strb	r2, [r7, #7]
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <LCD_Init+0x11c>)
 80023f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023fa:	80bb      	strh	r3, [r7, #4]
		d = ILI932x_regValues[i++];
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	71fa      	strb	r2, [r7, #7]
 8002402:	461a      	mov	r2, r3
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <LCD_Init+0x11c>)
 8002406:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800240a:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 800240c:	88bb      	ldrh	r3, [r7, #4]
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	d104      	bne.n	800241c <LCD_Init+0x94>
			HAL_Delay(d);
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fbdd 	bl	8000bd4 <HAL_Delay>
 800241a:	e005      	b.n	8002428 <LCD_Init+0xa0>
		} else {
			LCD_Write16Register16(a, d);
 800241c:	887a      	ldrh	r2, [r7, #2]
 800241e:	88bb      	ldrh	r3, [r7, #4]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff82 	bl	800232c <LCD_Write16Register16>
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	2b65      	cmp	r3, #101	; 0x65
 800242c:	d9de      	bls.n	80023ec <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <LCD_Init+0xfc>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fa18 	bl	8002868 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <LCD_Init+0xf4>)
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <LCD_Init+0xf8>)
 8002446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29b      	uxth	r3, r3
 8002450:	2100      	movs	r1, #0
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f976 	bl	8002744 <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <LCD_Init+0x118>)
 800245a:	2201      	movs	r2, #1
 800245c:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 800245e:	2000      	movs	r0, #0
 8002460:	f000 f8e4 	bl	800262c <LCD_FillScreen>
	LCD_SetTextSize(0);
 8002464:	2000      	movs	r0, #0
 8002466:	f000 fc05 	bl	8002c74 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 800246a:	2100      	movs	r1, #0
 800246c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002470:	f000 fc1a 	bl	8002ca8 <LCD_SetTextColor>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200000c0 	.word	0x200000c0
 8002480:	200000c2 	.word	0x200000c2
 8002484:	200000cd 	.word	0x200000cd
 8002488:	200000c4 	.word	0x200000c4
 800248c:	200000c6 	.word	0x200000c6
 8002490:	200000cc 	.word	0x200000cc
 8002494:	200000ca 	.word	0x200000ca
 8002498:	200000c8 	.word	0x200000c8
 800249c:	200000ce 	.word	0x200000ce
 80024a0:	40020400 	.word	0x40020400
 80024a4:	08003a0c 	.word	0x08003a0c

080024a8 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
 80024b2:	460b      	mov	r3, r1
 80024b4:	80bb      	strh	r3, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 80024ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db51      	blt.n	8002566 <LCD_DrawPixel+0xbe>
 80024c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db4d      	blt.n	8002566 <LCD_DrawPixel+0xbe>
 80024ca:	4b29      	ldr	r3, [pc, #164]	; (8002570 <LCD_DrawPixel+0xc8>)
 80024cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	da46      	bge.n	8002566 <LCD_DrawPixel+0xbe>
 80024d8:	4b26      	ldr	r3, [pc, #152]	; (8002574 <LCD_DrawPixel+0xcc>)
 80024da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	da3f      	bge.n	8002566 <LCD_DrawPixel+0xbe>

	LCD_CS_ACTIVE();
 80024e6:	4b24      	ldr	r3, [pc, #144]	; (8002578 <LCD_DrawPixel+0xd0>)
 80024e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024ec:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	int16_t t;
	switch (m_rotation) {
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <LCD_DrawPixel+0xd4>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d00d      	beq.n	8002512 <LCD_DrawPixel+0x6a>
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d017      	beq.n	800252a <LCD_DrawPixel+0x82>
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d120      	bne.n	8002540 <LCD_DrawPixel+0x98>
	case 1:
		t = x;
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8002502:	88bb      	ldrh	r3, [r7, #4]
 8002504:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002508:	b29b      	uxth	r3, r3
 800250a:	80fb      	strh	r3, [r7, #6]
		y = t;
 800250c:	89fb      	ldrh	r3, [r7, #14]
 800250e:	80bb      	strh	r3, [r7, #4]
		break;
 8002510:	e016      	b.n	8002540 <LCD_DrawPixel+0x98>
	case 2:
		x = TFTWIDTH - 1 - x;
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002518:	b29b      	uxth	r3, r3
 800251a:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 800251c:	88bb      	ldrh	r3, [r7, #4]
 800251e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002522:	3301      	adds	r3, #1
 8002524:	b29b      	uxth	r3, r3
 8002526:	80bb      	strh	r3, [r7, #4]
		break;
 8002528:	e00a      	b.n	8002540 <LCD_DrawPixel+0x98>
	case 3:
		t = x;
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	81fb      	strh	r3, [r7, #14]
		x = y;
 800252e:	88bb      	ldrh	r3, [r7, #4]
 8002530:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8002532:	89fb      	ldrh	r3, [r7, #14]
 8002534:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002538:	3301      	adds	r3, #1
 800253a:	b29b      	uxth	r3, r3
 800253c:	80bb      	strh	r3, [r7, #4]
		break;
 800253e:	bf00      	nop
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	4619      	mov	r1, r3
 8002544:	2020      	movs	r0, #32
 8002546:	f7ff fef1 	bl	800232c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 800254a:	88bb      	ldrh	r3, [r7, #4]
 800254c:	4619      	mov	r1, r3
 800254e:	2021      	movs	r0, #33	; 0x21
 8002550:	f7ff feec 	bl	800232c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4619      	mov	r1, r3
 8002558:	2022      	movs	r0, #34	; 0x22
 800255a:	f7ff fee7 	bl	800232c <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <LCD_DrawPixel+0xd0>)
 8002560:	2201      	movs	r2, #1
 8002562:	619a      	str	r2, [r3, #24]
 8002564:	e000      	b.n	8002568 <LCD_DrawPixel+0xc0>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8002566:	bf00      	nop
}
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200000c0 	.word	0x200000c0
 8002574:	200000c2 	.word	0x200000c2
 8002578:	40020400 	.word	0x40020400
 800257c:	200000cd 	.word	0x200000cd

08002580 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
	uint8_t green = LCD_Color565_to_G(color);
	uint8_t blue = LCD_Color565_to_B(color);
#else
	uint8_t hi = color >> 8, lo = color;
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	b29b      	uxth	r3, r3
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	73bb      	strb	r3, [r7, #14]
#endif

	LCD_CS_ACTIVE();
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <LCD_Flood+0xa4>)
 800259a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800259e:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	4619      	mov	r1, r3
 80025a4:	2022      	movs	r0, #34	; 0x22
 80025a6:	f7ff fec1 	bl	800232c <LCD_Write16Register16>
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif
	len--;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
#else
	if (hi == lo) {
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	7bbb      	ldrb	r3, [r7, #14]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d128      	bne.n	800260a <LCD_Flood+0x8a>
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 80025b8:	e019      	b.n	80025ee <LCD_Flood+0x6e>
#if defined(SSD1297)
			LCD_WR_STROBE();
#endif
			LCD_WR_STROBE();
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <LCD_Flood+0xa8>)
 80025bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c0:	619a      	str	r2, [r3, #24]
 80025c2:	2002      	movs	r0, #2
 80025c4:	f7ff fdb0 	bl	8002128 <delay>
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <LCD_Flood+0xa8>)
 80025ca:	2202      	movs	r2, #2
 80025cc:	619a      	str	r2, [r3, #24]
 80025ce:	2002      	movs	r0, #2
 80025d0:	f7ff fdaa 	bl	8002128 <delay>
			LCD_WR_STROBE();
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <LCD_Flood+0xa8>)
 80025d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025da:	619a      	str	r2, [r3, #24]
 80025dc:	2002      	movs	r0, #2
 80025de:	f7ff fda3 	bl	8002128 <delay>
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <LCD_Flood+0xa8>)
 80025e4:	2202      	movs	r2, #2
 80025e6:	619a      	str	r2, [r3, #24]
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7ff fd9d 	bl	8002128 <delay>
		while (len--) {
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	603a      	str	r2, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e0      	bne.n	80025ba <LCD_Flood+0x3a>
 80025f8:	e00c      	b.n	8002614 <LCD_Flood+0x94>
#if defined(SSD1297)
			LCD_Write8(red);
			LCD_Write8(green);
			LCD_Write8(blue);
#else
			LCD_Write8(hi);
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe3d 	bl	800227c <LCD_Write8>
			LCD_Write8(lo);
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fe39 	bl	800227c <LCD_Write8>
		while (len--) {
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	603a      	str	r2, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f2      	bne.n	80025fa <LCD_Flood+0x7a>
#endif
		}
	}

	LCD_CS_IDLE();
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <LCD_Flood+0xa4>)
 8002616:	2201      	movs	r2, #1
 8002618:	619a      	str	r2, [r3, #24]
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40020400 	.word	0x40020400
 8002628:	40020000 	.word	0x40020000

0800262c <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <LCD_FillScreen+0x7c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d00d      	beq.n	800265a <LCD_FillScreen+0x2e>
 800263e:	2b03      	cmp	r3, #3
 8002640:	d011      	beq.n	8002666 <LCD_FillScreen+0x3a>
 8002642:	2b01      	cmp	r3, #1
 8002644:	d004      	beq.n	8002650 <LCD_FillScreen+0x24>
	default:
		x = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	81fb      	strh	r3, [r7, #14]
		y = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	81bb      	strh	r3, [r7, #12]
		break;
 800264e:	e010      	b.n	8002672 <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 8002650:	23ef      	movs	r3, #239	; 0xef
 8002652:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	81bb      	strh	r3, [r7, #12]
		break;
 8002658:	e00b      	b.n	8002672 <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 800265a:	23ef      	movs	r3, #239	; 0xef
 800265c:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800265e:	f240 133f 	movw	r3, #319	; 0x13f
 8002662:	81bb      	strh	r3, [r7, #12]
		break;
 8002664:	e005      	b.n	8002672 <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800266a:	f240 133f 	movw	r3, #319	; 0x13f
 800266e:	81bb      	strh	r3, [r7, #12]
		break;
 8002670:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <LCD_FillScreen+0x80>)
 8002674:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002678:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 800267a:	89fb      	ldrh	r3, [r7, #14]
 800267c:	4619      	mov	r1, r3
 800267e:	2020      	movs	r0, #32
 8002680:	f7ff fe54 	bl	800232c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8002684:	89bb      	ldrh	r3, [r7, #12]
 8002686:	4619      	mov	r1, r3
 8002688:	2021      	movs	r0, #33	; 0x21
 800268a:	f7ff fe4f 	bl	800232c <LCD_Write16Register16>
#endif
	LCD_CS_IDLE();
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <LCD_FillScreen+0x80>)
 8002690:	2201      	movs	r2, #1
 8002692:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff70 	bl	8002580 <LCD_Flood>
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	200000cd 	.word	0x200000cd
 80026ac:	40020400 	.word	0x40020400

080026b0 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <LCD_Reset+0x88>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <LCD_Reset+0x8c>)
 80026be:	2210      	movs	r2, #16
 80026c0:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <LCD_Reset+0x8c>)
 80026c4:	2202      	movs	r2, #2
 80026c6:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <LCD_Reset+0x8c>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <LCD_Reset+0x90>)
 80026d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026d4:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 80026d6:	2002      	movs	r0, #2
 80026d8:	f7fe fa7c 	bl	8000bd4 <HAL_Delay>
	LCD_RST_IDLE();
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <LCD_Reset+0x90>)
 80026de:	2202      	movs	r2, #2
 80026e0:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 80026e2:	2078      	movs	r0, #120	; 0x78
 80026e4:	f7fe fa76 	bl	8000bd4 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <LCD_Reset+0x88>)
 80026ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026ee:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <LCD_Reset+0x8c>)
 80026f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026f6:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7ff fdbf 	bl	800227c <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 80026fe:	2300      	movs	r3, #0
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	e00f      	b.n	8002724 <LCD_Reset+0x74>
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <LCD_Reset+0x8c>)
 8002706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800270a:	619a      	str	r2, [r3, #24]
 800270c:	2002      	movs	r0, #2
 800270e:	f7ff fd0b 	bl	8002128 <delay>
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <LCD_Reset+0x8c>)
 8002714:	2202      	movs	r2, #2
 8002716:	619a      	str	r2, [r3, #24]
 8002718:	2002      	movs	r0, #2
 800271a:	f7ff fd05 	bl	8002128 <delay>
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	3301      	adds	r3, #1
 8002722:	71fb      	strb	r3, [r7, #7]
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d9ec      	bls.n	8002704 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 800272a:	4b03      	ldr	r3, [pc, #12]	; (8002738 <LCD_Reset+0x88>)
 800272c:	2201      	movs	r2, #1
 800272e:	619a      	str	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40020400 	.word	0x40020400
 800273c:	40020000 	.word	0x40020000
 8002740:	40020800 	.word	0x40020800

08002744 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	4604      	mov	r4, r0
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4623      	mov	r3, r4
 8002754:	80fb      	strh	r3, [r7, #6]
 8002756:	4603      	mov	r3, r0
 8002758:	80bb      	strh	r3, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	807b      	strh	r3, [r7, #2]
 800275e:	4613      	mov	r3, r2
 8002760:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 8002762:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <LCD_SetAddrWindow+0x11c>)
 8002764:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002768:	619a      	str	r2, [r3, #24]
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <LCD_SetAddrWindow+0x120>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d01c      	beq.n	80027ac <LCD_SetAddrWindow+0x68>
 8002772:	2b03      	cmp	r3, #3
 8002774:	d037      	beq.n	80027e6 <LCD_SetAddrWindow+0xa2>
 8002776:	2b01      	cmp	r3, #1
 8002778:	d004      	beq.n	8002784 <LCD_SetAddrWindow+0x40>
	default:
		x = x1;
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	617b      	str	r3, [r7, #20]
		y = y1;
 800277e:	88bb      	ldrh	r3, [r7, #4]
 8002780:	613b      	str	r3, [r7, #16]
		break;
 8002782:	e046      	b.n	8002812 <LCD_SetAddrWindow+0xce>
	case 1:
		t = y1;
 8002784:	88bb      	ldrh	r3, [r7, #4]
 8002786:	60fb      	str	r3, [r7, #12]
		y1 = x1;
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	80bb      	strh	r3, [r7, #4]
		x1 = TFTWIDTH - 1 - y2;
 800278c:	883b      	ldrh	r3, [r7, #0]
 800278e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002792:	80fb      	strh	r3, [r7, #6]
		y2 = x2;
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	803b      	strh	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80027a0:	807b      	strh	r3, [r7, #2]
		x = x2;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	617b      	str	r3, [r7, #20]
		y = y1;
 80027a6:	88bb      	ldrh	r3, [r7, #4]
 80027a8:	613b      	str	r3, [r7, #16]
		break;
 80027aa:	e032      	b.n	8002812 <LCD_SetAddrWindow+0xce>
	case 2:
		t = x1;
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	60fb      	str	r3, [r7, #12]
		x1 = TFTWIDTH - 1 - x2;
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80027b6:	80fb      	strh	r3, [r7, #6]
		x2 = TFTWIDTH - 1 - t;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80027c0:	807b      	strh	r3, [r7, #2]
		t = y1;
 80027c2:	88bb      	ldrh	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - y2;
 80027c6:	883b      	ldrh	r3, [r7, #0]
 80027c8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80027cc:	3301      	adds	r3, #1
 80027ce:	80bb      	strh	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80027d8:	3301      	adds	r3, #1
 80027da:	803b      	strh	r3, [r7, #0]
		x = x2;
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	617b      	str	r3, [r7, #20]
		y = y2;
 80027e0:	883b      	ldrh	r3, [r7, #0]
 80027e2:	613b      	str	r3, [r7, #16]
		break;
 80027e4:	e015      	b.n	8002812 <LCD_SetAddrWindow+0xce>
	case 3:
		t = x1;
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	60fb      	str	r3, [r7, #12]
		x1 = y1;
 80027ea:	88bb      	ldrh	r3, [r7, #4]
 80027ec:	80fb      	strh	r3, [r7, #6]
		y1 = TFTHEIGHT - 1 - x2;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80027f4:	3301      	adds	r3, #1
 80027f6:	80bb      	strh	r3, [r7, #4]
		x2 = y2;
 80027f8:	883b      	ldrh	r3, [r7, #0]
 80027fa:	807b      	strh	r3, [r7, #2]
		y2 = TFTHEIGHT - 1 - t;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002804:	3301      	adds	r3, #1
 8002806:	803b      	strh	r3, [r7, #0]
		x = x1;
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	617b      	str	r3, [r7, #20]
		y = y2;
 800280c:	883b      	ldrh	r3, [r7, #0]
 800280e:	613b      	str	r3, [r7, #16]
		break;
 8002810:	bf00      	nop
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	4619      	mov	r1, r3
 8002816:	2050      	movs	r0, #80	; 0x50
 8002818:	f7ff fd88 	bl	800232c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	4619      	mov	r1, r3
 8002820:	2051      	movs	r0, #81	; 0x51
 8002822:	f7ff fd83 	bl	800232c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 8002826:	88bb      	ldrh	r3, [r7, #4]
 8002828:	4619      	mov	r1, r3
 800282a:	2052      	movs	r0, #82	; 0x52
 800282c:	f7ff fd7e 	bl	800232c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 8002830:	883b      	ldrh	r3, [r7, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	2053      	movs	r0, #83	; 0x53
 8002836:	f7ff fd79 	bl	800232c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	b29b      	uxth	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	2020      	movs	r0, #32
 8002842:	f7ff fd73 	bl	800232c <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	b29b      	uxth	r3, r3
 800284a:	4619      	mov	r1, r3
 800284c:	2021      	movs	r0, #33	; 0x21
 800284e:	f7ff fd6d 	bl	800232c <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 8002852:	4b03      	ldr	r3, [pc, #12]	; (8002860 <LCD_SetAddrWindow+0x11c>)
 8002854:	2201      	movs	r2, #1
 8002856:	619a      	str	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	40020400 	.word	0x40020400
 8002864:	200000cd 	.word	0x200000cd

08002868 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b28      	ldr	r3, [pc, #160]	; (800291c <LCD_SetRotation+0xb4>)
 800287c:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <LCD_SetRotation+0xb4>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d009      	beq.n	800289a <LCD_SetRotation+0x32>
 8002886:	2b03      	cmp	r3, #3
 8002888:	d007      	beq.n	800289a <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 800288a:	4b25      	ldr	r3, [pc, #148]	; (8002920 <LCD_SetRotation+0xb8>)
 800288c:	22f0      	movs	r2, #240	; 0xf0
 800288e:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <LCD_SetRotation+0xbc>)
 8002892:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002896:	801a      	strh	r2, [r3, #0]
		break;
 8002898:	e007      	b.n	80028aa <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <LCD_SetRotation+0xb8>)
 800289c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028a0:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <LCD_SetRotation+0xbc>)
 80028a4:	22f0      	movs	r2, #240	; 0xf0
 80028a6:	801a      	strh	r2, [r3, #0]
		break;
 80028a8:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <LCD_SetRotation+0xc0>)
 80028ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028b0:	619a      	str	r2, [r3, #24]
#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
    uint16_t t;
    switch(m_rotation) {
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <LCD_SetRotation+0xb4>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d00b      	beq.n	80028d2 <LCD_SetRotation+0x6a>
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d00d      	beq.n	80028da <LCD_SetRotation+0x72>
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d003      	beq.n	80028ca <LCD_SetRotation+0x62>
		default: t = 0x1030; break;
 80028c2:	f241 0330 	movw	r3, #4144	; 0x1030
 80028c6:	81fb      	strh	r3, [r7, #14]
 80028c8:	e00b      	b.n	80028e2 <LCD_SetRotation+0x7a>
		case 1: t = 0x1028; break;
 80028ca:	f241 0328 	movw	r3, #4136	; 0x1028
 80028ce:	81fb      	strh	r3, [r7, #14]
 80028d0:	e007      	b.n	80028e2 <LCD_SetRotation+0x7a>
		case 2: t = 0x1000; break;
 80028d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d6:	81fb      	strh	r3, [r7, #14]
 80028d8:	e003      	b.n	80028e2 <LCD_SetRotation+0x7a>
		case 3: t = 0x1018; break;
 80028da:	f241 0318 	movw	r3, #4120	; 0x1018
 80028de:	81fb      	strh	r3, [r7, #14]
 80028e0:	bf00      	nop
    }
    LCD_Write16Register16(ILI932X_ENTRY_MOD, t); // MADCTL
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	4619      	mov	r1, r3
 80028e6:	2003      	movs	r0, #3
 80028e8:	f7ff fd20 	bl	800232c <LCD_Write16Register16>
    // For 932X, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <LCD_SetRotation+0xb8>)
 80028ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <LCD_SetRotation+0xbc>)
 80028fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	2100      	movs	r1, #0
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff ff1c 	bl	8002744 <LCD_SetAddrWindow>
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <LCD_SetRotation+0xc0>)
 800290e:	2201      	movs	r2, #1
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200000cd 	.word	0x200000cd
 8002920:	200000c0 	.word	0x200000c0
 8002924:	200000c2 	.word	0x200000c2
 8002928:	40020400 	.word	0x40020400

0800292c <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b08b      	sub	sp, #44	; 0x2c
 8002930:	af00      	add	r7, sp, #0
 8002932:	4604      	mov	r4, r0
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4623      	mov	r3, r4
 800293c:	80fb      	strh	r3, [r7, #6]
 800293e:	4603      	mov	r3, r0
 8002940:	80bb      	strh	r3, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	70fb      	strb	r3, [r7, #3]
 8002946:	4613      	mov	r3, r2
 8002948:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 8002952:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002956:	4a65      	ldr	r2, [pc, #404]	; (8002aec <LCD_DrawChar+0x1c0>)
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	88db      	ldrh	r3, [r3, #6]
 800295e:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 8002960:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002964:	4a61      	ldr	r2, [pc, #388]	; (8002aec <LCD_DrawChar+0x1c0>)
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	889b      	ldrh	r3, [r3, #4]
 800296c:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 800296e:	4b60      	ldr	r3, [pc, #384]	; (8002af0 <LCD_DrawChar+0x1c4>)
 8002970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002974:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002978:	429a      	cmp	r2, r3
 800297a:	f280 80b2 	bge.w	8002ae2 <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <LCD_DrawChar+0x1c8>)
 8002980:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8002984:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	f280 80aa 	bge.w	8002ae2 <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 800298e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002992:	8abb      	ldrh	r3, [r7, #20]
 8002994:	4413      	add	r3, r2
 8002996:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 8002998:	2b00      	cmp	r3, #0
 800299a:	f2c0 80a2 	blt.w	8002ae2 <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 800299e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80029a2:	8afb      	ldrh	r3, [r7, #22]
 80029a4:	4413      	add	r3, r2
 80029a6:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f2c0 809a 	blt.w	8002ae2 <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 80029ae:	8abb      	ldrh	r3, [r7, #20]
 80029b0:	3307      	adds	r3, #7
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da00      	bge.n	80029b8 <LCD_DrawChar+0x8c>
 80029b6:	3307      	adds	r3, #7
 80029b8:	10db      	asrs	r3, r3, #3
 80029ba:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	2b1f      	cmp	r3, #31
 80029c0:	d802      	bhi.n	80029c8 <LCD_DrawChar+0x9c>
 80029c2:	2320      	movs	r3, #32
 80029c4:	70fb      	strb	r3, [r7, #3]
 80029c6:	e004      	b.n	80029d2 <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	2b7e      	cmp	r3, #126	; 0x7e
 80029cc:	d901      	bls.n	80029d2 <LCD_DrawChar+0xa6>
 80029ce:	2320      	movs	r3, #32
 80029d0:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	3b20      	subs	r3, #32
 80029d6:	8afa      	ldrh	r2, [r7, #22]
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	8a7a      	ldrh	r2, [r7, #18]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 80029e4:	8a7b      	ldrh	r3, [r7, #18]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	8abb      	ldrh	r3, [r7, #20]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
 80029f8:	e06e      	b.n	8002ad8 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 80029fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80029fe:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <LCD_DrawChar+0x1c0>)
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	441a      	add	r2, r3
 8002a0a:	8abb      	ldrh	r3, [r7, #20]
 8002a0c:	3307      	adds	r3, #7
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da00      	bge.n	8002a14 <LCD_DrawChar+0xe8>
 8002a12:	3307      	adds	r3, #7
 8002a14:	10db      	asrs	r3, r3, #3
 8002a16:	4619      	mov	r1, r3
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	fb03 f301 	mul.w	r3, r3, r1
 8002a1e:	4413      	add	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 8002a22:	8a7b      	ldrh	r3, [r7, #18]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d002      	beq.n	8002a2e <LCD_DrawChar+0x102>
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d004      	beq.n	8002a36 <LCD_DrawChar+0x10a>
 8002a2c:	e00c      	b.n	8002a48 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002a34:	e016      	b.n	8002a64 <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	3201      	adds	r2, #1
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002a46:	e00d      	b.n	8002a64 <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3301      	adds	r3, #1
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	4313      	orrs	r3, r2
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	3202      	adds	r2, #2
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002a62:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	e029      	b.n	8002abe <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 8002a6a:	8aba      	ldrh	r2, [r7, #20]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	7c7b      	ldrb	r3, [r7, #17]
 8002a72:	4413      	add	r3, r2
 8002a74:	3b01      	subs	r3, #1
 8002a76:	2201      	movs	r2, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00c      	beq.n	8002aa0 <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	883a      	ldrh	r2, [r7, #0]
 8002a94:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fd05 	bl	80024a8 <LCD_DrawPixel>
 8002a9e:	e00b      	b.n	8002ab8 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	b21b      	sxth	r3, r3
 8002aac:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002aae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fcf8 	bl	80024a8 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	8abb      	ldrh	r3, [r7, #20]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3d1      	bcc.n	8002a6a <LCD_DrawChar+0x13e>
			}
		}
		y++;
 8002ac6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	8afb      	ldrh	r3, [r7, #22]
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d38c      	bcc.n	80029fa <LCD_DrawChar+0xce>
 8002ae0:	e000      	b.n	8002ae4 <LCD_DrawChar+0x1b8>
		return;
 8002ae2:	bf00      	nop
	}
}
 8002ae4:	372c      	adds	r7, #44	; 0x2c
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000038 	.word	0x20000038
 8002af0:	200000c0 	.word	0x200000c0
 8002af4:	200000c2 	.word	0x200000c2

08002af8 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8002af8:	b40f      	push	{r0, r1, r2, r3}
 8002afa:	b5b0      	push	{r4, r5, r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8002b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b04:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	4850      	ldr	r0, [pc, #320]	; (8002c4c <LCD_Printf+0x154>)
 8002b0c:	f000 f92c 	bl	8002d68 <vsiprintf>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 8002b10:	4b4f      	ldr	r3, [pc, #316]	; (8002c50 <LCD_Printf+0x158>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <LCD_Printf+0x15c>)
 8002b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1c:	88db      	ldrh	r3, [r3, #6]
 8002b1e:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <LCD_Printf+0x158>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <LCD_Printf+0x15c>)
 8002b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2c:	889b      	ldrh	r3, [r3, #4]
 8002b2e:	80bb      	strh	r3, [r7, #4]

	p = buf;
 8002b30:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <LCD_Printf+0x154>)
 8002b32:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8002b34:	e07d      	b.n	8002c32 <LCD_Printf+0x13a>
		if (*p == '\n') {
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b0a      	cmp	r3, #10
 8002b3c:	d10e      	bne.n	8002b5c <LCD_Printf+0x64>
			m_cursor_y += height;
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <LCD_Printf+0x160>)
 8002b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b21a      	sxth	r2, r3
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <LCD_Printf+0x160>)
 8002b52:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8002b54:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <LCD_Printf+0x164>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	e067      	b.n	8002c2c <LCD_Printf+0x134>
		} else if (*p == '\r') {
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b0d      	cmp	r3, #13
 8002b62:	d103      	bne.n	8002b6c <LCD_Printf+0x74>
			m_cursor_x = 0;
 8002b64:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <LCD_Printf+0x164>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e05f      	b.n	8002c2c <LCD_Printf+0x134>
		} else if (*p == '\t') {
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d10d      	bne.n	8002b90 <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 8002b74:	88bb      	ldrh	r3, [r7, #4]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <LCD_Printf+0x164>)
 8002b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <LCD_Printf+0x164>)
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	e04d      	b.n	8002c2c <LCD_Printf+0x134>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 8002b90:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <LCD_Printf+0x160>)
 8002b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <LCD_Printf+0x168>)
 8002b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	1acb      	subs	r3, r1, r3
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	db02      	blt.n	8002bb0 <LCD_Printf+0xb8>
				m_cursor_y = 0;
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <LCD_Printf+0x160>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <LCD_Printf+0x164>)
 8002bb2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002bb6:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <LCD_Printf+0x160>)
 8002bb8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	781c      	ldrb	r4, [r3, #0]
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <LCD_Printf+0x16c>)
 8002bc2:	881d      	ldrh	r5, [r3, #0]
 8002bc4:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <LCD_Printf+0x170>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <LCD_Printf+0x158>)
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	9201      	str	r2, [sp, #4]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	f7ff feaa 	bl	800292c <LCD_DrawChar>
			m_cursor_x += width;
 8002bd8:	88bb      	ldrh	r3, [r7, #4]
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <LCD_Printf+0x164>)
 8002bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	b21a      	sxth	r2, r3
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <LCD_Printf+0x164>)
 8002bec:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8002bee:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <LCD_Printf+0x174>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01a      	beq.n	8002c2c <LCD_Printf+0x134>
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <LCD_Printf+0x164>)
 8002bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <LCD_Printf+0x178>)
 8002c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c04:	4619      	mov	r1, r3
 8002c06:	88bb      	ldrh	r3, [r7, #4]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1acb      	subs	r3, r1, r3
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dd0d      	ble.n	8002c2c <LCD_Printf+0x134>
				m_cursor_y += height;
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <LCD_Printf+0x160>)
 8002c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	b21a      	sxth	r2, r3
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <LCD_Printf+0x160>)
 8002c24:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <LCD_Printf+0x164>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f47f af7d 	bne.w	8002b36 <LCD_Printf+0x3e>
	}
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002c46:	b004      	add	sp, #16
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	200000d0 	.word	0x200000d0
 8002c50:	200000cc 	.word	0x200000cc
 8002c54:	20000038 	.word	0x20000038
 8002c58:	200000c6 	.word	0x200000c6
 8002c5c:	200000c4 	.word	0x200000c4
 8002c60:	200000c2 	.word	0x200000c2
 8002c64:	200000c8 	.word	0x200000c8
 8002c68:	200000ca 	.word	0x200000ca
 8002c6c:	200000ce 	.word	0x200000ce
 8002c70:	200000c0 	.word	0x200000c0

08002c74 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 8002c7e:	2201      	movs	r2, #1
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d305      	bcc.n	8002c92 <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <LCD_SetTextSize+0x30>)
 8002c8e:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 8002c90:	e002      	b.n	8002c98 <LCD_SetTextSize+0x24>
		m_font = s;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <LCD_SetTextSize+0x30>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	7013      	strb	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	200000cc 	.word	0x200000cc

08002ca8 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	80fb      	strh	r3, [r7, #6]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8002cb8:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <LCD_SetTextColor+0x28>)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <LCD_SetTextColor+0x2c>)
 8002cc0:	88bb      	ldrh	r3, [r7, #4]
 8002cc2:	8013      	strh	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	200000c8 	.word	0x200000c8
 8002cd4:	200000ca 	.word	0x200000ca

08002cd8 <__errno>:
 8002cd8:	4b01      	ldr	r3, [pc, #4]	; (8002ce0 <__errno+0x8>)
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	2000003c 	.word	0x2000003c

08002ce4 <__libc_init_array>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	4e0d      	ldr	r6, [pc, #52]	; (8002d1c <__libc_init_array+0x38>)
 8002ce8:	4c0d      	ldr	r4, [pc, #52]	; (8002d20 <__libc_init_array+0x3c>)
 8002cea:	1ba4      	subs	r4, r4, r6
 8002cec:	10a4      	asrs	r4, r4, #2
 8002cee:	2500      	movs	r5, #0
 8002cf0:	42a5      	cmp	r5, r4
 8002cf2:	d109      	bne.n	8002d08 <__libc_init_array+0x24>
 8002cf4:	4e0b      	ldr	r6, [pc, #44]	; (8002d24 <__libc_init_array+0x40>)
 8002cf6:	4c0c      	ldr	r4, [pc, #48]	; (8002d28 <__libc_init_array+0x44>)
 8002cf8:	f000 fc26 	bl	8003548 <_init>
 8002cfc:	1ba4      	subs	r4, r4, r6
 8002cfe:	10a4      	asrs	r4, r4, #2
 8002d00:	2500      	movs	r5, #0
 8002d02:	42a5      	cmp	r5, r4
 8002d04:	d105      	bne.n	8002d12 <__libc_init_array+0x2e>
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d0c:	4798      	blx	r3
 8002d0e:	3501      	adds	r5, #1
 8002d10:	e7ee      	b.n	8002cf0 <__libc_init_array+0xc>
 8002d12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d16:	4798      	blx	r3
 8002d18:	3501      	adds	r5, #1
 8002d1a:	e7f2      	b.n	8002d02 <__libc_init_array+0x1e>
 8002d1c:	08003b14 	.word	0x08003b14
 8002d20:	08003b14 	.word	0x08003b14
 8002d24:	08003b14 	.word	0x08003b14
 8002d28:	08003b18 	.word	0x08003b18

08002d2c <memset>:
 8002d2c:	4402      	add	r2, r0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d100      	bne.n	8002d36 <memset+0xa>
 8002d34:	4770      	bx	lr
 8002d36:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3a:	e7f9      	b.n	8002d30 <memset+0x4>

08002d3c <_vsiprintf_r>:
 8002d3c:	b500      	push	{lr}
 8002d3e:	b09b      	sub	sp, #108	; 0x6c
 8002d40:	9100      	str	r1, [sp, #0]
 8002d42:	9104      	str	r1, [sp, #16]
 8002d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d48:	9105      	str	r1, [sp, #20]
 8002d4a:	9102      	str	r1, [sp, #8]
 8002d4c:	4905      	ldr	r1, [pc, #20]	; (8002d64 <_vsiprintf_r+0x28>)
 8002d4e:	9103      	str	r1, [sp, #12]
 8002d50:	4669      	mov	r1, sp
 8002d52:	f000 f86d 	bl	8002e30 <_svfiprintf_r>
 8002d56:	9b00      	ldr	r3, [sp, #0]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	b01b      	add	sp, #108	; 0x6c
 8002d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d62:	bf00      	nop
 8002d64:	ffff0208 	.word	0xffff0208

08002d68 <vsiprintf>:
 8002d68:	4613      	mov	r3, r2
 8002d6a:	460a      	mov	r2, r1
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	4802      	ldr	r0, [pc, #8]	; (8002d78 <vsiprintf+0x10>)
 8002d70:	6800      	ldr	r0, [r0, #0]
 8002d72:	f7ff bfe3 	b.w	8002d3c <_vsiprintf_r>
 8002d76:	bf00      	nop
 8002d78:	2000003c 	.word	0x2000003c

08002d7c <__ssputs_r>:
 8002d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d80:	688e      	ldr	r6, [r1, #8]
 8002d82:	429e      	cmp	r6, r3
 8002d84:	4682      	mov	sl, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	4690      	mov	r8, r2
 8002d8a:	4699      	mov	r9, r3
 8002d8c:	d837      	bhi.n	8002dfe <__ssputs_r+0x82>
 8002d8e:	898a      	ldrh	r2, [r1, #12]
 8002d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d94:	d031      	beq.n	8002dfa <__ssputs_r+0x7e>
 8002d96:	6825      	ldr	r5, [r4, #0]
 8002d98:	6909      	ldr	r1, [r1, #16]
 8002d9a:	1a6f      	subs	r7, r5, r1
 8002d9c:	6965      	ldr	r5, [r4, #20]
 8002d9e:	2302      	movs	r3, #2
 8002da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002da4:	fb95 f5f3 	sdiv	r5, r5, r3
 8002da8:	f109 0301 	add.w	r3, r9, #1
 8002dac:	443b      	add	r3, r7
 8002dae:	429d      	cmp	r5, r3
 8002db0:	bf38      	it	cc
 8002db2:	461d      	movcc	r5, r3
 8002db4:	0553      	lsls	r3, r2, #21
 8002db6:	d530      	bpl.n	8002e1a <__ssputs_r+0x9e>
 8002db8:	4629      	mov	r1, r5
 8002dba:	f000 fb2b 	bl	8003414 <_malloc_r>
 8002dbe:	4606      	mov	r6, r0
 8002dc0:	b950      	cbnz	r0, 8002dd8 <__ssputs_r+0x5c>
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	f8ca 3000 	str.w	r3, [sl]
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dce:	81a3      	strh	r3, [r4, #12]
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd8:	463a      	mov	r2, r7
 8002dda:	6921      	ldr	r1, [r4, #16]
 8002ddc:	f000 faa8 	bl	8003330 <memcpy>
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dea:	81a3      	strh	r3, [r4, #12]
 8002dec:	6126      	str	r6, [r4, #16]
 8002dee:	6165      	str	r5, [r4, #20]
 8002df0:	443e      	add	r6, r7
 8002df2:	1bed      	subs	r5, r5, r7
 8002df4:	6026      	str	r6, [r4, #0]
 8002df6:	60a5      	str	r5, [r4, #8]
 8002df8:	464e      	mov	r6, r9
 8002dfa:	454e      	cmp	r6, r9
 8002dfc:	d900      	bls.n	8002e00 <__ssputs_r+0x84>
 8002dfe:	464e      	mov	r6, r9
 8002e00:	4632      	mov	r2, r6
 8002e02:	4641      	mov	r1, r8
 8002e04:	6820      	ldr	r0, [r4, #0]
 8002e06:	f000 fa9e 	bl	8003346 <memmove>
 8002e0a:	68a3      	ldr	r3, [r4, #8]
 8002e0c:	1b9b      	subs	r3, r3, r6
 8002e0e:	60a3      	str	r3, [r4, #8]
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	441e      	add	r6, r3
 8002e14:	6026      	str	r6, [r4, #0]
 8002e16:	2000      	movs	r0, #0
 8002e18:	e7dc      	b.n	8002dd4 <__ssputs_r+0x58>
 8002e1a:	462a      	mov	r2, r5
 8002e1c:	f000 fb54 	bl	80034c8 <_realloc_r>
 8002e20:	4606      	mov	r6, r0
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d1e2      	bne.n	8002dec <__ssputs_r+0x70>
 8002e26:	6921      	ldr	r1, [r4, #16]
 8002e28:	4650      	mov	r0, sl
 8002e2a:	f000 faa5 	bl	8003378 <_free_r>
 8002e2e:	e7c8      	b.n	8002dc2 <__ssputs_r+0x46>

08002e30 <_svfiprintf_r>:
 8002e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e34:	461d      	mov	r5, r3
 8002e36:	898b      	ldrh	r3, [r1, #12]
 8002e38:	061f      	lsls	r7, r3, #24
 8002e3a:	b09d      	sub	sp, #116	; 0x74
 8002e3c:	4680      	mov	r8, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	4616      	mov	r6, r2
 8002e42:	d50f      	bpl.n	8002e64 <_svfiprintf_r+0x34>
 8002e44:	690b      	ldr	r3, [r1, #16]
 8002e46:	b96b      	cbnz	r3, 8002e64 <_svfiprintf_r+0x34>
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	f000 fae3 	bl	8003414 <_malloc_r>
 8002e4e:	6020      	str	r0, [r4, #0]
 8002e50:	6120      	str	r0, [r4, #16]
 8002e52:	b928      	cbnz	r0, 8002e60 <_svfiprintf_r+0x30>
 8002e54:	230c      	movs	r3, #12
 8002e56:	f8c8 3000 	str.w	r3, [r8]
 8002e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5e:	e0c8      	b.n	8002ff2 <_svfiprintf_r+0x1c2>
 8002e60:	2340      	movs	r3, #64	; 0x40
 8002e62:	6163      	str	r3, [r4, #20]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9309      	str	r3, [sp, #36]	; 0x24
 8002e68:	2320      	movs	r3, #32
 8002e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e6e:	2330      	movs	r3, #48	; 0x30
 8002e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e74:	9503      	str	r5, [sp, #12]
 8002e76:	f04f 0b01 	mov.w	fp, #1
 8002e7a:	4637      	mov	r7, r6
 8002e7c:	463d      	mov	r5, r7
 8002e7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002e82:	b10b      	cbz	r3, 8002e88 <_svfiprintf_r+0x58>
 8002e84:	2b25      	cmp	r3, #37	; 0x25
 8002e86:	d13e      	bne.n	8002f06 <_svfiprintf_r+0xd6>
 8002e88:	ebb7 0a06 	subs.w	sl, r7, r6
 8002e8c:	d00b      	beq.n	8002ea6 <_svfiprintf_r+0x76>
 8002e8e:	4653      	mov	r3, sl
 8002e90:	4632      	mov	r2, r6
 8002e92:	4621      	mov	r1, r4
 8002e94:	4640      	mov	r0, r8
 8002e96:	f7ff ff71 	bl	8002d7c <__ssputs_r>
 8002e9a:	3001      	adds	r0, #1
 8002e9c:	f000 80a4 	beq.w	8002fe8 <_svfiprintf_r+0x1b8>
 8002ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea2:	4453      	add	r3, sl
 8002ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea6:	783b      	ldrb	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 809d 	beq.w	8002fe8 <_svfiprintf_r+0x1b8>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eb8:	9304      	str	r3, [sp, #16]
 8002eba:	9307      	str	r3, [sp, #28]
 8002ebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ec0:	931a      	str	r3, [sp, #104]	; 0x68
 8002ec2:	462f      	mov	r7, r5
 8002ec4:	2205      	movs	r2, #5
 8002ec6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002eca:	4850      	ldr	r0, [pc, #320]	; (800300c <_svfiprintf_r+0x1dc>)
 8002ecc:	f7fd f9a0 	bl	8000210 <memchr>
 8002ed0:	9b04      	ldr	r3, [sp, #16]
 8002ed2:	b9d0      	cbnz	r0, 8002f0a <_svfiprintf_r+0xda>
 8002ed4:	06d9      	lsls	r1, r3, #27
 8002ed6:	bf44      	itt	mi
 8002ed8:	2220      	movmi	r2, #32
 8002eda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ede:	071a      	lsls	r2, r3, #28
 8002ee0:	bf44      	itt	mi
 8002ee2:	222b      	movmi	r2, #43	; 0x2b
 8002ee4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ee8:	782a      	ldrb	r2, [r5, #0]
 8002eea:	2a2a      	cmp	r2, #42	; 0x2a
 8002eec:	d015      	beq.n	8002f1a <_svfiprintf_r+0xea>
 8002eee:	9a07      	ldr	r2, [sp, #28]
 8002ef0:	462f      	mov	r7, r5
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	250a      	movs	r5, #10
 8002ef6:	4639      	mov	r1, r7
 8002ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002efc:	3b30      	subs	r3, #48	; 0x30
 8002efe:	2b09      	cmp	r3, #9
 8002f00:	d94d      	bls.n	8002f9e <_svfiprintf_r+0x16e>
 8002f02:	b1b8      	cbz	r0, 8002f34 <_svfiprintf_r+0x104>
 8002f04:	e00f      	b.n	8002f26 <_svfiprintf_r+0xf6>
 8002f06:	462f      	mov	r7, r5
 8002f08:	e7b8      	b.n	8002e7c <_svfiprintf_r+0x4c>
 8002f0a:	4a40      	ldr	r2, [pc, #256]	; (800300c <_svfiprintf_r+0x1dc>)
 8002f0c:	1a80      	subs	r0, r0, r2
 8002f0e:	fa0b f000 	lsl.w	r0, fp, r0
 8002f12:	4318      	orrs	r0, r3
 8002f14:	9004      	str	r0, [sp, #16]
 8002f16:	463d      	mov	r5, r7
 8002f18:	e7d3      	b.n	8002ec2 <_svfiprintf_r+0x92>
 8002f1a:	9a03      	ldr	r2, [sp, #12]
 8002f1c:	1d11      	adds	r1, r2, #4
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	9103      	str	r1, [sp, #12]
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	db01      	blt.n	8002f2a <_svfiprintf_r+0xfa>
 8002f26:	9207      	str	r2, [sp, #28]
 8002f28:	e004      	b.n	8002f34 <_svfiprintf_r+0x104>
 8002f2a:	4252      	negs	r2, r2
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	9207      	str	r2, [sp, #28]
 8002f32:	9304      	str	r3, [sp, #16]
 8002f34:	783b      	ldrb	r3, [r7, #0]
 8002f36:	2b2e      	cmp	r3, #46	; 0x2e
 8002f38:	d10c      	bne.n	8002f54 <_svfiprintf_r+0x124>
 8002f3a:	787b      	ldrb	r3, [r7, #1]
 8002f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3e:	d133      	bne.n	8002fa8 <_svfiprintf_r+0x178>
 8002f40:	9b03      	ldr	r3, [sp, #12]
 8002f42:	1d1a      	adds	r2, r3, #4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	9203      	str	r2, [sp, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bfb8      	it	lt
 8002f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f50:	3702      	adds	r7, #2
 8002f52:	9305      	str	r3, [sp, #20]
 8002f54:	4d2e      	ldr	r5, [pc, #184]	; (8003010 <_svfiprintf_r+0x1e0>)
 8002f56:	7839      	ldrb	r1, [r7, #0]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	f7fd f958 	bl	8000210 <memchr>
 8002f60:	b138      	cbz	r0, 8002f72 <_svfiprintf_r+0x142>
 8002f62:	2340      	movs	r3, #64	; 0x40
 8002f64:	1b40      	subs	r0, r0, r5
 8002f66:	fa03 f000 	lsl.w	r0, r3, r0
 8002f6a:	9b04      	ldr	r3, [sp, #16]
 8002f6c:	4303      	orrs	r3, r0
 8002f6e:	3701      	adds	r7, #1
 8002f70:	9304      	str	r3, [sp, #16]
 8002f72:	7839      	ldrb	r1, [r7, #0]
 8002f74:	4827      	ldr	r0, [pc, #156]	; (8003014 <_svfiprintf_r+0x1e4>)
 8002f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f7a:	2206      	movs	r2, #6
 8002f7c:	1c7e      	adds	r6, r7, #1
 8002f7e:	f7fd f947 	bl	8000210 <memchr>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d038      	beq.n	8002ff8 <_svfiprintf_r+0x1c8>
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <_svfiprintf_r+0x1e8>)
 8002f88:	bb13      	cbnz	r3, 8002fd0 <_svfiprintf_r+0x1a0>
 8002f8a:	9b03      	ldr	r3, [sp, #12]
 8002f8c:	3307      	adds	r3, #7
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	3308      	adds	r3, #8
 8002f94:	9303      	str	r3, [sp, #12]
 8002f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f98:	444b      	add	r3, r9
 8002f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f9c:	e76d      	b.n	8002e7a <_svfiprintf_r+0x4a>
 8002f9e:	fb05 3202 	mla	r2, r5, r2, r3
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	460f      	mov	r7, r1
 8002fa6:	e7a6      	b.n	8002ef6 <_svfiprintf_r+0xc6>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	3701      	adds	r7, #1
 8002fac:	9305      	str	r3, [sp, #20]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	250a      	movs	r5, #10
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fb8:	3a30      	subs	r2, #48	; 0x30
 8002fba:	2a09      	cmp	r2, #9
 8002fbc:	d903      	bls.n	8002fc6 <_svfiprintf_r+0x196>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0c8      	beq.n	8002f54 <_svfiprintf_r+0x124>
 8002fc2:	9105      	str	r1, [sp, #20]
 8002fc4:	e7c6      	b.n	8002f54 <_svfiprintf_r+0x124>
 8002fc6:	fb05 2101 	mla	r1, r5, r1, r2
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4607      	mov	r7, r0
 8002fce:	e7f0      	b.n	8002fb2 <_svfiprintf_r+0x182>
 8002fd0:	ab03      	add	r3, sp, #12
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <_svfiprintf_r+0x1ec>)
 8002fd8:	a904      	add	r1, sp, #16
 8002fda:	4640      	mov	r0, r8
 8002fdc:	f3af 8000 	nop.w
 8002fe0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002fe4:	4681      	mov	r9, r0
 8002fe6:	d1d6      	bne.n	8002f96 <_svfiprintf_r+0x166>
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	065b      	lsls	r3, r3, #25
 8002fec:	f53f af35 	bmi.w	8002e5a <_svfiprintf_r+0x2a>
 8002ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ff2:	b01d      	add	sp, #116	; 0x74
 8002ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff8:	ab03      	add	r3, sp, #12
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <_svfiprintf_r+0x1ec>)
 8003000:	a904      	add	r1, sp, #16
 8003002:	4640      	mov	r0, r8
 8003004:	f000 f882 	bl	800310c <_printf_i>
 8003008:	e7ea      	b.n	8002fe0 <_svfiprintf_r+0x1b0>
 800300a:	bf00      	nop
 800300c:	08003ad8 	.word	0x08003ad8
 8003010:	08003ade 	.word	0x08003ade
 8003014:	08003ae2 	.word	0x08003ae2
 8003018:	00000000 	.word	0x00000000
 800301c:	08002d7d 	.word	0x08002d7d

08003020 <_printf_common>:
 8003020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003024:	4691      	mov	r9, r2
 8003026:	461f      	mov	r7, r3
 8003028:	688a      	ldr	r2, [r1, #8]
 800302a:	690b      	ldr	r3, [r1, #16]
 800302c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003030:	4293      	cmp	r3, r2
 8003032:	bfb8      	it	lt
 8003034:	4613      	movlt	r3, r2
 8003036:	f8c9 3000 	str.w	r3, [r9]
 800303a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800303e:	4606      	mov	r6, r0
 8003040:	460c      	mov	r4, r1
 8003042:	b112      	cbz	r2, 800304a <_printf_common+0x2a>
 8003044:	3301      	adds	r3, #1
 8003046:	f8c9 3000 	str.w	r3, [r9]
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	0699      	lsls	r1, r3, #26
 800304e:	bf42      	ittt	mi
 8003050:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003054:	3302      	addmi	r3, #2
 8003056:	f8c9 3000 	strmi.w	r3, [r9]
 800305a:	6825      	ldr	r5, [r4, #0]
 800305c:	f015 0506 	ands.w	r5, r5, #6
 8003060:	d107      	bne.n	8003072 <_printf_common+0x52>
 8003062:	f104 0a19 	add.w	sl, r4, #25
 8003066:	68e3      	ldr	r3, [r4, #12]
 8003068:	f8d9 2000 	ldr.w	r2, [r9]
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	42ab      	cmp	r3, r5
 8003070:	dc28      	bgt.n	80030c4 <_printf_common+0xa4>
 8003072:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	3300      	adds	r3, #0
 800307a:	bf18      	it	ne
 800307c:	2301      	movne	r3, #1
 800307e:	0692      	lsls	r2, r2, #26
 8003080:	d42d      	bmi.n	80030de <_printf_common+0xbe>
 8003082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003086:	4639      	mov	r1, r7
 8003088:	4630      	mov	r0, r6
 800308a:	47c0      	blx	r8
 800308c:	3001      	adds	r0, #1
 800308e:	d020      	beq.n	80030d2 <_printf_common+0xb2>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	68e5      	ldr	r5, [r4, #12]
 8003094:	f8d9 2000 	ldr.w	r2, [r9]
 8003098:	f003 0306 	and.w	r3, r3, #6
 800309c:	2b04      	cmp	r3, #4
 800309e:	bf08      	it	eq
 80030a0:	1aad      	subeq	r5, r5, r2
 80030a2:	68a3      	ldr	r3, [r4, #8]
 80030a4:	6922      	ldr	r2, [r4, #16]
 80030a6:	bf0c      	ite	eq
 80030a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030ac:	2500      	movne	r5, #0
 80030ae:	4293      	cmp	r3, r2
 80030b0:	bfc4      	itt	gt
 80030b2:	1a9b      	subgt	r3, r3, r2
 80030b4:	18ed      	addgt	r5, r5, r3
 80030b6:	f04f 0900 	mov.w	r9, #0
 80030ba:	341a      	adds	r4, #26
 80030bc:	454d      	cmp	r5, r9
 80030be:	d11a      	bne.n	80030f6 <_printf_common+0xd6>
 80030c0:	2000      	movs	r0, #0
 80030c2:	e008      	b.n	80030d6 <_printf_common+0xb6>
 80030c4:	2301      	movs	r3, #1
 80030c6:	4652      	mov	r2, sl
 80030c8:	4639      	mov	r1, r7
 80030ca:	4630      	mov	r0, r6
 80030cc:	47c0      	blx	r8
 80030ce:	3001      	adds	r0, #1
 80030d0:	d103      	bne.n	80030da <_printf_common+0xba>
 80030d2:	f04f 30ff 	mov.w	r0, #4294967295
 80030d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030da:	3501      	adds	r5, #1
 80030dc:	e7c3      	b.n	8003066 <_printf_common+0x46>
 80030de:	18e1      	adds	r1, r4, r3
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	2030      	movs	r0, #48	; 0x30
 80030e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030e8:	4422      	add	r2, r4
 80030ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030f2:	3302      	adds	r3, #2
 80030f4:	e7c5      	b.n	8003082 <_printf_common+0x62>
 80030f6:	2301      	movs	r3, #1
 80030f8:	4622      	mov	r2, r4
 80030fa:	4639      	mov	r1, r7
 80030fc:	4630      	mov	r0, r6
 80030fe:	47c0      	blx	r8
 8003100:	3001      	adds	r0, #1
 8003102:	d0e6      	beq.n	80030d2 <_printf_common+0xb2>
 8003104:	f109 0901 	add.w	r9, r9, #1
 8003108:	e7d8      	b.n	80030bc <_printf_common+0x9c>
	...

0800310c <_printf_i>:
 800310c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003110:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003114:	460c      	mov	r4, r1
 8003116:	7e09      	ldrb	r1, [r1, #24]
 8003118:	b085      	sub	sp, #20
 800311a:	296e      	cmp	r1, #110	; 0x6e
 800311c:	4617      	mov	r7, r2
 800311e:	4606      	mov	r6, r0
 8003120:	4698      	mov	r8, r3
 8003122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003124:	f000 80b3 	beq.w	800328e <_printf_i+0x182>
 8003128:	d822      	bhi.n	8003170 <_printf_i+0x64>
 800312a:	2963      	cmp	r1, #99	; 0x63
 800312c:	d036      	beq.n	800319c <_printf_i+0x90>
 800312e:	d80a      	bhi.n	8003146 <_printf_i+0x3a>
 8003130:	2900      	cmp	r1, #0
 8003132:	f000 80b9 	beq.w	80032a8 <_printf_i+0x19c>
 8003136:	2958      	cmp	r1, #88	; 0x58
 8003138:	f000 8083 	beq.w	8003242 <_printf_i+0x136>
 800313c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003140:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003144:	e032      	b.n	80031ac <_printf_i+0xa0>
 8003146:	2964      	cmp	r1, #100	; 0x64
 8003148:	d001      	beq.n	800314e <_printf_i+0x42>
 800314a:	2969      	cmp	r1, #105	; 0x69
 800314c:	d1f6      	bne.n	800313c <_printf_i+0x30>
 800314e:	6820      	ldr	r0, [r4, #0]
 8003150:	6813      	ldr	r3, [r2, #0]
 8003152:	0605      	lsls	r5, r0, #24
 8003154:	f103 0104 	add.w	r1, r3, #4
 8003158:	d52a      	bpl.n	80031b0 <_printf_i+0xa4>
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6011      	str	r1, [r2, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da03      	bge.n	800316a <_printf_i+0x5e>
 8003162:	222d      	movs	r2, #45	; 0x2d
 8003164:	425b      	negs	r3, r3
 8003166:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800316a:	486f      	ldr	r0, [pc, #444]	; (8003328 <_printf_i+0x21c>)
 800316c:	220a      	movs	r2, #10
 800316e:	e039      	b.n	80031e4 <_printf_i+0xd8>
 8003170:	2973      	cmp	r1, #115	; 0x73
 8003172:	f000 809d 	beq.w	80032b0 <_printf_i+0x1a4>
 8003176:	d808      	bhi.n	800318a <_printf_i+0x7e>
 8003178:	296f      	cmp	r1, #111	; 0x6f
 800317a:	d020      	beq.n	80031be <_printf_i+0xb2>
 800317c:	2970      	cmp	r1, #112	; 0x70
 800317e:	d1dd      	bne.n	800313c <_printf_i+0x30>
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	f043 0320 	orr.w	r3, r3, #32
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	e003      	b.n	8003192 <_printf_i+0x86>
 800318a:	2975      	cmp	r1, #117	; 0x75
 800318c:	d017      	beq.n	80031be <_printf_i+0xb2>
 800318e:	2978      	cmp	r1, #120	; 0x78
 8003190:	d1d4      	bne.n	800313c <_printf_i+0x30>
 8003192:	2378      	movs	r3, #120	; 0x78
 8003194:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003198:	4864      	ldr	r0, [pc, #400]	; (800332c <_printf_i+0x220>)
 800319a:	e055      	b.n	8003248 <_printf_i+0x13c>
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	1d19      	adds	r1, r3, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6011      	str	r1, [r2, #0]
 80031a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031ac:	2301      	movs	r3, #1
 80031ae:	e08c      	b.n	80032ca <_printf_i+0x1be>
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6011      	str	r1, [r2, #0]
 80031b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031b8:	bf18      	it	ne
 80031ba:	b21b      	sxthne	r3, r3
 80031bc:	e7cf      	b.n	800315e <_printf_i+0x52>
 80031be:	6813      	ldr	r3, [r2, #0]
 80031c0:	6825      	ldr	r5, [r4, #0]
 80031c2:	1d18      	adds	r0, r3, #4
 80031c4:	6010      	str	r0, [r2, #0]
 80031c6:	0628      	lsls	r0, r5, #24
 80031c8:	d501      	bpl.n	80031ce <_printf_i+0xc2>
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	e002      	b.n	80031d4 <_printf_i+0xc8>
 80031ce:	0668      	lsls	r0, r5, #25
 80031d0:	d5fb      	bpl.n	80031ca <_printf_i+0xbe>
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	4854      	ldr	r0, [pc, #336]	; (8003328 <_printf_i+0x21c>)
 80031d6:	296f      	cmp	r1, #111	; 0x6f
 80031d8:	bf14      	ite	ne
 80031da:	220a      	movne	r2, #10
 80031dc:	2208      	moveq	r2, #8
 80031de:	2100      	movs	r1, #0
 80031e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031e4:	6865      	ldr	r5, [r4, #4]
 80031e6:	60a5      	str	r5, [r4, #8]
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	f2c0 8095 	blt.w	8003318 <_printf_i+0x20c>
 80031ee:	6821      	ldr	r1, [r4, #0]
 80031f0:	f021 0104 	bic.w	r1, r1, #4
 80031f4:	6021      	str	r1, [r4, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d13d      	bne.n	8003276 <_printf_i+0x16a>
 80031fa:	2d00      	cmp	r5, #0
 80031fc:	f040 808e 	bne.w	800331c <_printf_i+0x210>
 8003200:	4665      	mov	r5, ip
 8003202:	2a08      	cmp	r2, #8
 8003204:	d10b      	bne.n	800321e <_printf_i+0x112>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	07db      	lsls	r3, r3, #31
 800320a:	d508      	bpl.n	800321e <_printf_i+0x112>
 800320c:	6923      	ldr	r3, [r4, #16]
 800320e:	6862      	ldr	r2, [r4, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	bfde      	ittt	le
 8003214:	2330      	movle	r3, #48	; 0x30
 8003216:	f805 3c01 	strble.w	r3, [r5, #-1]
 800321a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800321e:	ebac 0305 	sub.w	r3, ip, r5
 8003222:	6123      	str	r3, [r4, #16]
 8003224:	f8cd 8000 	str.w	r8, [sp]
 8003228:	463b      	mov	r3, r7
 800322a:	aa03      	add	r2, sp, #12
 800322c:	4621      	mov	r1, r4
 800322e:	4630      	mov	r0, r6
 8003230:	f7ff fef6 	bl	8003020 <_printf_common>
 8003234:	3001      	adds	r0, #1
 8003236:	d14d      	bne.n	80032d4 <_printf_i+0x1c8>
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	b005      	add	sp, #20
 800323e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003242:	4839      	ldr	r0, [pc, #228]	; (8003328 <_printf_i+0x21c>)
 8003244:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003248:	6813      	ldr	r3, [r2, #0]
 800324a:	6821      	ldr	r1, [r4, #0]
 800324c:	1d1d      	adds	r5, r3, #4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6015      	str	r5, [r2, #0]
 8003252:	060a      	lsls	r2, r1, #24
 8003254:	d50b      	bpl.n	800326e <_printf_i+0x162>
 8003256:	07ca      	lsls	r2, r1, #31
 8003258:	bf44      	itt	mi
 800325a:	f041 0120 	orrmi.w	r1, r1, #32
 800325e:	6021      	strmi	r1, [r4, #0]
 8003260:	b91b      	cbnz	r3, 800326a <_printf_i+0x15e>
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	f022 0220 	bic.w	r2, r2, #32
 8003268:	6022      	str	r2, [r4, #0]
 800326a:	2210      	movs	r2, #16
 800326c:	e7b7      	b.n	80031de <_printf_i+0xd2>
 800326e:	064d      	lsls	r5, r1, #25
 8003270:	bf48      	it	mi
 8003272:	b29b      	uxthmi	r3, r3
 8003274:	e7ef      	b.n	8003256 <_printf_i+0x14a>
 8003276:	4665      	mov	r5, ip
 8003278:	fbb3 f1f2 	udiv	r1, r3, r2
 800327c:	fb02 3311 	mls	r3, r2, r1, r3
 8003280:	5cc3      	ldrb	r3, [r0, r3]
 8003282:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003286:	460b      	mov	r3, r1
 8003288:	2900      	cmp	r1, #0
 800328a:	d1f5      	bne.n	8003278 <_printf_i+0x16c>
 800328c:	e7b9      	b.n	8003202 <_printf_i+0xf6>
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	6825      	ldr	r5, [r4, #0]
 8003292:	6961      	ldr	r1, [r4, #20]
 8003294:	1d18      	adds	r0, r3, #4
 8003296:	6010      	str	r0, [r2, #0]
 8003298:	0628      	lsls	r0, r5, #24
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	d501      	bpl.n	80032a2 <_printf_i+0x196>
 800329e:	6019      	str	r1, [r3, #0]
 80032a0:	e002      	b.n	80032a8 <_printf_i+0x19c>
 80032a2:	066a      	lsls	r2, r5, #25
 80032a4:	d5fb      	bpl.n	800329e <_printf_i+0x192>
 80032a6:	8019      	strh	r1, [r3, #0]
 80032a8:	2300      	movs	r3, #0
 80032aa:	6123      	str	r3, [r4, #16]
 80032ac:	4665      	mov	r5, ip
 80032ae:	e7b9      	b.n	8003224 <_printf_i+0x118>
 80032b0:	6813      	ldr	r3, [r2, #0]
 80032b2:	1d19      	adds	r1, r3, #4
 80032b4:	6011      	str	r1, [r2, #0]
 80032b6:	681d      	ldr	r5, [r3, #0]
 80032b8:	6862      	ldr	r2, [r4, #4]
 80032ba:	2100      	movs	r1, #0
 80032bc:	4628      	mov	r0, r5
 80032be:	f7fc ffa7 	bl	8000210 <memchr>
 80032c2:	b108      	cbz	r0, 80032c8 <_printf_i+0x1bc>
 80032c4:	1b40      	subs	r0, r0, r5
 80032c6:	6060      	str	r0, [r4, #4]
 80032c8:	6863      	ldr	r3, [r4, #4]
 80032ca:	6123      	str	r3, [r4, #16]
 80032cc:	2300      	movs	r3, #0
 80032ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032d2:	e7a7      	b.n	8003224 <_printf_i+0x118>
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	462a      	mov	r2, r5
 80032d8:	4639      	mov	r1, r7
 80032da:	4630      	mov	r0, r6
 80032dc:	47c0      	blx	r8
 80032de:	3001      	adds	r0, #1
 80032e0:	d0aa      	beq.n	8003238 <_printf_i+0x12c>
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	079b      	lsls	r3, r3, #30
 80032e6:	d413      	bmi.n	8003310 <_printf_i+0x204>
 80032e8:	68e0      	ldr	r0, [r4, #12]
 80032ea:	9b03      	ldr	r3, [sp, #12]
 80032ec:	4298      	cmp	r0, r3
 80032ee:	bfb8      	it	lt
 80032f0:	4618      	movlt	r0, r3
 80032f2:	e7a3      	b.n	800323c <_printf_i+0x130>
 80032f4:	2301      	movs	r3, #1
 80032f6:	464a      	mov	r2, r9
 80032f8:	4639      	mov	r1, r7
 80032fa:	4630      	mov	r0, r6
 80032fc:	47c0      	blx	r8
 80032fe:	3001      	adds	r0, #1
 8003300:	d09a      	beq.n	8003238 <_printf_i+0x12c>
 8003302:	3501      	adds	r5, #1
 8003304:	68e3      	ldr	r3, [r4, #12]
 8003306:	9a03      	ldr	r2, [sp, #12]
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	42ab      	cmp	r3, r5
 800330c:	dcf2      	bgt.n	80032f4 <_printf_i+0x1e8>
 800330e:	e7eb      	b.n	80032e8 <_printf_i+0x1dc>
 8003310:	2500      	movs	r5, #0
 8003312:	f104 0919 	add.w	r9, r4, #25
 8003316:	e7f5      	b.n	8003304 <_printf_i+0x1f8>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ac      	bne.n	8003276 <_printf_i+0x16a>
 800331c:	7803      	ldrb	r3, [r0, #0]
 800331e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003322:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003326:	e76c      	b.n	8003202 <_printf_i+0xf6>
 8003328:	08003ae9 	.word	0x08003ae9
 800332c:	08003afa 	.word	0x08003afa

08003330 <memcpy>:
 8003330:	b510      	push	{r4, lr}
 8003332:	1e43      	subs	r3, r0, #1
 8003334:	440a      	add	r2, r1
 8003336:	4291      	cmp	r1, r2
 8003338:	d100      	bne.n	800333c <memcpy+0xc>
 800333a:	bd10      	pop	{r4, pc}
 800333c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003344:	e7f7      	b.n	8003336 <memcpy+0x6>

08003346 <memmove>:
 8003346:	4288      	cmp	r0, r1
 8003348:	b510      	push	{r4, lr}
 800334a:	eb01 0302 	add.w	r3, r1, r2
 800334e:	d807      	bhi.n	8003360 <memmove+0x1a>
 8003350:	1e42      	subs	r2, r0, #1
 8003352:	4299      	cmp	r1, r3
 8003354:	d00a      	beq.n	800336c <memmove+0x26>
 8003356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800335a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800335e:	e7f8      	b.n	8003352 <memmove+0xc>
 8003360:	4283      	cmp	r3, r0
 8003362:	d9f5      	bls.n	8003350 <memmove+0xa>
 8003364:	1881      	adds	r1, r0, r2
 8003366:	1ad2      	subs	r2, r2, r3
 8003368:	42d3      	cmn	r3, r2
 800336a:	d100      	bne.n	800336e <memmove+0x28>
 800336c:	bd10      	pop	{r4, pc}
 800336e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003372:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003376:	e7f7      	b.n	8003368 <memmove+0x22>

08003378 <_free_r>:
 8003378:	b538      	push	{r3, r4, r5, lr}
 800337a:	4605      	mov	r5, r0
 800337c:	2900      	cmp	r1, #0
 800337e:	d045      	beq.n	800340c <_free_r+0x94>
 8003380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003384:	1f0c      	subs	r4, r1, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	bfb8      	it	lt
 800338a:	18e4      	addlt	r4, r4, r3
 800338c:	f000 f8d2 	bl	8003534 <__malloc_lock>
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <_free_r+0x98>)
 8003392:	6813      	ldr	r3, [r2, #0]
 8003394:	4610      	mov	r0, r2
 8003396:	b933      	cbnz	r3, 80033a6 <_free_r+0x2e>
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	6014      	str	r4, [r2, #0]
 800339c:	4628      	mov	r0, r5
 800339e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033a2:	f000 b8c8 	b.w	8003536 <__malloc_unlock>
 80033a6:	42a3      	cmp	r3, r4
 80033a8:	d90c      	bls.n	80033c4 <_free_r+0x4c>
 80033aa:	6821      	ldr	r1, [r4, #0]
 80033ac:	1862      	adds	r2, r4, r1
 80033ae:	4293      	cmp	r3, r2
 80033b0:	bf04      	itt	eq
 80033b2:	681a      	ldreq	r2, [r3, #0]
 80033b4:	685b      	ldreq	r3, [r3, #4]
 80033b6:	6063      	str	r3, [r4, #4]
 80033b8:	bf04      	itt	eq
 80033ba:	1852      	addeq	r2, r2, r1
 80033bc:	6022      	streq	r2, [r4, #0]
 80033be:	6004      	str	r4, [r0, #0]
 80033c0:	e7ec      	b.n	800339c <_free_r+0x24>
 80033c2:	4613      	mov	r3, r2
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	b10a      	cbz	r2, 80033cc <_free_r+0x54>
 80033c8:	42a2      	cmp	r2, r4
 80033ca:	d9fa      	bls.n	80033c2 <_free_r+0x4a>
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	1858      	adds	r0, r3, r1
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	d10b      	bne.n	80033ec <_free_r+0x74>
 80033d4:	6820      	ldr	r0, [r4, #0]
 80033d6:	4401      	add	r1, r0
 80033d8:	1858      	adds	r0, r3, r1
 80033da:	4282      	cmp	r2, r0
 80033dc:	6019      	str	r1, [r3, #0]
 80033de:	d1dd      	bne.n	800339c <_free_r+0x24>
 80033e0:	6810      	ldr	r0, [r2, #0]
 80033e2:	6852      	ldr	r2, [r2, #4]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	4401      	add	r1, r0
 80033e8:	6019      	str	r1, [r3, #0]
 80033ea:	e7d7      	b.n	800339c <_free_r+0x24>
 80033ec:	d902      	bls.n	80033f4 <_free_r+0x7c>
 80033ee:	230c      	movs	r3, #12
 80033f0:	602b      	str	r3, [r5, #0]
 80033f2:	e7d3      	b.n	800339c <_free_r+0x24>
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	1821      	adds	r1, r4, r0
 80033f8:	428a      	cmp	r2, r1
 80033fa:	bf04      	itt	eq
 80033fc:	6811      	ldreq	r1, [r2, #0]
 80033fe:	6852      	ldreq	r2, [r2, #4]
 8003400:	6062      	str	r2, [r4, #4]
 8003402:	bf04      	itt	eq
 8003404:	1809      	addeq	r1, r1, r0
 8003406:	6021      	streq	r1, [r4, #0]
 8003408:	605c      	str	r4, [r3, #4]
 800340a:	e7c7      	b.n	800339c <_free_r+0x24>
 800340c:	bd38      	pop	{r3, r4, r5, pc}
 800340e:	bf00      	nop
 8003410:	200001d0 	.word	0x200001d0

08003414 <_malloc_r>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	1ccd      	adds	r5, r1, #3
 8003418:	f025 0503 	bic.w	r5, r5, #3
 800341c:	3508      	adds	r5, #8
 800341e:	2d0c      	cmp	r5, #12
 8003420:	bf38      	it	cc
 8003422:	250c      	movcc	r5, #12
 8003424:	2d00      	cmp	r5, #0
 8003426:	4606      	mov	r6, r0
 8003428:	db01      	blt.n	800342e <_malloc_r+0x1a>
 800342a:	42a9      	cmp	r1, r5
 800342c:	d903      	bls.n	8003436 <_malloc_r+0x22>
 800342e:	230c      	movs	r3, #12
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	2000      	movs	r0, #0
 8003434:	bd70      	pop	{r4, r5, r6, pc}
 8003436:	f000 f87d 	bl	8003534 <__malloc_lock>
 800343a:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <_malloc_r+0xac>)
 800343c:	6814      	ldr	r4, [r2, #0]
 800343e:	4621      	mov	r1, r4
 8003440:	b991      	cbnz	r1, 8003468 <_malloc_r+0x54>
 8003442:	4c20      	ldr	r4, [pc, #128]	; (80034c4 <_malloc_r+0xb0>)
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	b91b      	cbnz	r3, 8003450 <_malloc_r+0x3c>
 8003448:	4630      	mov	r0, r6
 800344a:	f000 f863 	bl	8003514 <_sbrk_r>
 800344e:	6020      	str	r0, [r4, #0]
 8003450:	4629      	mov	r1, r5
 8003452:	4630      	mov	r0, r6
 8003454:	f000 f85e 	bl	8003514 <_sbrk_r>
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d124      	bne.n	80034a6 <_malloc_r+0x92>
 800345c:	230c      	movs	r3, #12
 800345e:	6033      	str	r3, [r6, #0]
 8003460:	4630      	mov	r0, r6
 8003462:	f000 f868 	bl	8003536 <__malloc_unlock>
 8003466:	e7e4      	b.n	8003432 <_malloc_r+0x1e>
 8003468:	680b      	ldr	r3, [r1, #0]
 800346a:	1b5b      	subs	r3, r3, r5
 800346c:	d418      	bmi.n	80034a0 <_malloc_r+0x8c>
 800346e:	2b0b      	cmp	r3, #11
 8003470:	d90f      	bls.n	8003492 <_malloc_r+0x7e>
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	50cd      	str	r5, [r1, r3]
 8003476:	18cc      	adds	r4, r1, r3
 8003478:	4630      	mov	r0, r6
 800347a:	f000 f85c 	bl	8003536 <__malloc_unlock>
 800347e:	f104 000b 	add.w	r0, r4, #11
 8003482:	1d23      	adds	r3, r4, #4
 8003484:	f020 0007 	bic.w	r0, r0, #7
 8003488:	1ac3      	subs	r3, r0, r3
 800348a:	d0d3      	beq.n	8003434 <_malloc_r+0x20>
 800348c:	425a      	negs	r2, r3
 800348e:	50e2      	str	r2, [r4, r3]
 8003490:	e7d0      	b.n	8003434 <_malloc_r+0x20>
 8003492:	428c      	cmp	r4, r1
 8003494:	684b      	ldr	r3, [r1, #4]
 8003496:	bf16      	itet	ne
 8003498:	6063      	strne	r3, [r4, #4]
 800349a:	6013      	streq	r3, [r2, #0]
 800349c:	460c      	movne	r4, r1
 800349e:	e7eb      	b.n	8003478 <_malloc_r+0x64>
 80034a0:	460c      	mov	r4, r1
 80034a2:	6849      	ldr	r1, [r1, #4]
 80034a4:	e7cc      	b.n	8003440 <_malloc_r+0x2c>
 80034a6:	1cc4      	adds	r4, r0, #3
 80034a8:	f024 0403 	bic.w	r4, r4, #3
 80034ac:	42a0      	cmp	r0, r4
 80034ae:	d005      	beq.n	80034bc <_malloc_r+0xa8>
 80034b0:	1a21      	subs	r1, r4, r0
 80034b2:	4630      	mov	r0, r6
 80034b4:	f000 f82e 	bl	8003514 <_sbrk_r>
 80034b8:	3001      	adds	r0, #1
 80034ba:	d0cf      	beq.n	800345c <_malloc_r+0x48>
 80034bc:	6025      	str	r5, [r4, #0]
 80034be:	e7db      	b.n	8003478 <_malloc_r+0x64>
 80034c0:	200001d0 	.word	0x200001d0
 80034c4:	200001d4 	.word	0x200001d4

080034c8 <_realloc_r>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	4607      	mov	r7, r0
 80034cc:	4614      	mov	r4, r2
 80034ce:	460e      	mov	r6, r1
 80034d0:	b921      	cbnz	r1, 80034dc <_realloc_r+0x14>
 80034d2:	4611      	mov	r1, r2
 80034d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034d8:	f7ff bf9c 	b.w	8003414 <_malloc_r>
 80034dc:	b922      	cbnz	r2, 80034e8 <_realloc_r+0x20>
 80034de:	f7ff ff4b 	bl	8003378 <_free_r>
 80034e2:	4625      	mov	r5, r4
 80034e4:	4628      	mov	r0, r5
 80034e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034e8:	f000 f826 	bl	8003538 <_malloc_usable_size_r>
 80034ec:	42a0      	cmp	r0, r4
 80034ee:	d20f      	bcs.n	8003510 <_realloc_r+0x48>
 80034f0:	4621      	mov	r1, r4
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7ff ff8e 	bl	8003414 <_malloc_r>
 80034f8:	4605      	mov	r5, r0
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d0f2      	beq.n	80034e4 <_realloc_r+0x1c>
 80034fe:	4631      	mov	r1, r6
 8003500:	4622      	mov	r2, r4
 8003502:	f7ff ff15 	bl	8003330 <memcpy>
 8003506:	4631      	mov	r1, r6
 8003508:	4638      	mov	r0, r7
 800350a:	f7ff ff35 	bl	8003378 <_free_r>
 800350e:	e7e9      	b.n	80034e4 <_realloc_r+0x1c>
 8003510:	4635      	mov	r5, r6
 8003512:	e7e7      	b.n	80034e4 <_realloc_r+0x1c>

08003514 <_sbrk_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4c06      	ldr	r4, [pc, #24]	; (8003530 <_sbrk_r+0x1c>)
 8003518:	2300      	movs	r3, #0
 800351a:	4605      	mov	r5, r0
 800351c:	4608      	mov	r0, r1
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	f7fd fa5a 	bl	80009d8 <_sbrk>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <_sbrk_r+0x1a>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	b103      	cbz	r3, 800352e <_sbrk_r+0x1a>
 800352c:	602b      	str	r3, [r5, #0]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	2000025c 	.word	0x2000025c

08003534 <__malloc_lock>:
 8003534:	4770      	bx	lr

08003536 <__malloc_unlock>:
 8003536:	4770      	bx	lr

08003538 <_malloc_usable_size_r>:
 8003538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353c:	1f18      	subs	r0, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	bfbc      	itt	lt
 8003542:	580b      	ldrlt	r3, [r1, r0]
 8003544:	18c0      	addlt	r0, r0, r3
 8003546:	4770      	bx	lr

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr
